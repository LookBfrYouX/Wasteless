stages:
  - npm-dependencies
  - get-dependencies
  - build
  - test
  - sonarqube
  - move-user-content
  - deploy-frontend
  - restore-user-content
  - deploy-backend
# frontend has to be deployed before backend so that user content can be restored. Hence, user content directory will always exist when backend is deployed
# If backend is deployed before frontend and an image is immediately uploaded, the backend will have to create the user-content/images folder or fail. If backend makes a folder, the `restore-user-content`  script will move the folder *inside* the newly-created user-content folder instead of making it the new user content folder (i.e. /dist/user-content/images/bla.jpg instead of /dist/user-content/staging-user-content/images/bla.jpg - this will increase after every deploy)

tag_checker:
  stage: build
  script:
    - python3 tag_checker.py $CI_COMMIT_TAG
  only:
    - tags

npm-install:
  stage: npm-dependencies
  cache:
    key: node-modules
    paths:
      - frontend/node_modules
  script:
    - cd frontend
    - npm install

download-country-data:
  stage: get-dependencies
  script:
    node ./downloadCountryData.js

junit:
  stage: test
  script:
    - cd backend
    - ./gradlew test
  artifacts:
    paths:
      - backend/jacoco

# Run acceptance (cucumber) tests
# Uncomment after ATDD workshop (at the latest)
cucumber:
 stage: test
 script:
   - cd backend
   - ./gradlew cucumber

# Run Jest (Javascript) tests
# Uncomment after Jest workshop (at the latest)
jest:
  stage: test
  cache:
    key: node-modules
    paths:
      - frontend/node_modules
    policy: pull
  script:
    - cd frontend
    - npm run test
  artifacts:
    paths:
      - frontend/coverage

# Export sonarqube (static code analysis) reports
# Uncomment after ATDD workshop (at the latest)
dev-sonarqube:
  stage: sonarqube
  cache:
    key: node-modules
    paths:
      - frontend/node_modules
    policy: pull
  script:
    - cd frontend
    - npm run sonarqube
    - cd ../backend
    - ./gradlew sonarqube
  only:
    - dev

# builds all branches, except dev and master
branch-build:
  stage: build
  cache:
    key: node-modules
    paths:
      - frontend/node_modules
    policy: pull
  script:
    - cd frontend
    - npm run build
    - cd ../backend
    - ./gradlew bootJar
  artifacts:
    paths:
      - frontend/dist
      - backend/build/libs
  except:
    - tags
    - master
    - dev

# Images need to be stored in staging-frontend/dist/user-content/images folder as they need to be served by frontend
# But that folder is deleted on deploy, so move the contents to outside of the staging-frontend folder before the directory is deleted
move-user-content-staging:
  stage: move-user-content
  script:
    - mkdir -p /home/gitlab-runner/staging-frontend/dist/user-content/images/
    - rm -rf /home/gitlab-runner/staging-user-content/
    - mv /home/gitlab-runner/staging-frontend/dist/user-content/ /home/gitlab-runner/staging-user-content/
  only:
    - dev

move-user-content-production:
  stage: move-user-content
  script:
    - mkdir -p /home/gitlab-runner/production-frontend/dist/user-content/images/
    - rm -rf /home/gitlab-runner/production-user-content/
    - mv /home/gitlab-runner/production-frontend/dist/user-content/ /home/gitlab-runner/production-user-content/
  only:
    - tags
    - master

deploy-staging-frontend:
  stage: deploy-frontend
  cache:
    key: node-modules
    paths:
      - frontend/node_modules
    policy: pull
  script:
    - cd frontend
    - npm run build
    - rm -rf /home/gitlab-runner/staging-frontend/ || true
    - mkdir /home/gitlab-runner/staging-frontend/
    - cp -r ./dist/ /home/gitlab-runner/staging-frontend
    - cp ../runner/staging-frontend.sh /home/gitlab-runner/staging-frontend.sh
    - chmod u+x /home/gitlab-runner/staging-frontend.sh
    - sudo systemctl restart seng302-staging-frontend
  artifacts:
    paths:
      - frontend/dist
  only:
    - dev

deploy-production-frontend:
  stage: deploy-frontend
  cache:
    key: node-modules
    paths:
      - frontend/node_modules
    policy: pull
  script:
    - cd frontend
    - npm run build-prod
    - rm -rf /home/gitlab-runner/production-frontend/ || true
    - mkdir /home/gitlab-runner/production-frontend/
    - cp -r ./dist/ /home/gitlab-runner/production-frontend
    - cp ../runner/production-frontend.sh /home/gitlab-runner/production-frontend.sh
    - chmod u+x /home/gitlab-runner/production-frontend.sh
    - sudo systemctl restart seng302-production-frontend
  artifacts:
    paths:
      - frontend/dist
  only:
    - tags
    - master


# Once deployed, move the images folder back inside staging-frontend
restore-user-content-staging:
  stage: restore-user-content
  script:
    - mkdir -p /home/gitlab-runner/staging-frontend/dist
    - rm -rf /home/gitlab-runner/staging-frontend/dist/user-content/
    # if the directory already exists, the mv moves the folder inside rather than moving and renaming the folder. Hence, must ensure it does not exist
    - mkdir -p /home/gitlab-runner/staging-user-content/images/products
    # backend relies on /images/product folder existing
    - mv /home/gitlab-runner/staging-user-content/ /home/gitlab-runner/staging-frontend/dist/user-content/
  only:
    - dev

restore-user-content-production:
  stage: restore-user-content
  script:
    - mkdir -p /home/gitlab-runner/production-frontend/dist
    - rm -rf /home/gitlab-runner/production-frontend/dist/user-content/
    - mkdir -p /home/gitlab-runner/production-user-content/images/products
    - mv /home/gitlab-runner/production-user-content/ /home/gitlab-runner/production-frontend/dist/user-content
  only:
    - tags
    - master


deploy-staging-backend:
  stage: deploy-backend
  script:
    - cd backend
    - ./gradlew bootJar
    - rm -rf /home/gitlab-runner/staging-backend/ || true
    - mkdir /home/gitlab-runner/staging-backend/
    - cp -r ./build/libs /home/gitlab-runner/staging-backend
    - cp ../runner/staging-backend.sh /home/gitlab-runner/staging-backend.sh
    - printenv | grep "DGAA_\|DB_" | sed "s/^/export /" > /home/gitlab-runner/env.txt
    - chmod u+x /home/gitlab-runner/staging-backend.sh
    - sudo systemctl restart seng302-staging-backend
  artifacts:
    paths:
      - backend/build/libs
  only:
    - dev


deploy-production-backend:
  stage: deploy-backend
  script:
    - cd backend
    - ./gradlew bootJar
    - rm -rf /home/gitlab-runner/production-backend/ || true
    - mkdir /home/gitlab-runner/production-backend/
    - cp -r ./build/libs /home/gitlab-runner/production-backend
    - cp ../runner/production-backend.sh /home/gitlab-runner/production-backend.sh
    - printenv | grep "DGAA_\|DB_" | sed "s/^/export /" > /home/gitlab-runner/env.txt
    - chmod u+x /home/gitlab-runner/production-backend.sh
    - sudo systemctl restart seng302-production-backend
  artifacts:
    paths:
      - backend/build/libs
  only:
    - tags
    - master
