{
  "info": {
    "_postman_id": "401553b1-7a45-4cf1-a0e2-354e8192a76f",
    "name": "Wasteless",
    "description": "API specification for Team 300's SENG302 2021 project\n\nContact Support:\n Email: seng302@canterbury.ac.nz",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "users",
      "item": [
        {
          "name": "{id}",
          "item": [
            {
              "name": "Retrieve a specific user account",
              "request": {
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "JSESSIONID",
                      "type": "string"
                    },
                    {
                      "key": "value",
                      "value": true,
                      "type": "boolean"
                    },
                    {
                      "key": "in",
                      "value": "header",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users/{{userId}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    "{{userId}}"
                  ]
                }
              },
              "response": [
                {
                  "name": "Account retrieved successfully",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "description": "Added as a part of security scheme: apikey",
                        "key": "JSESSIONID",
                        "value": "<API Key>"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/users/:id",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "users",
                        ":id"
                      ],
                      "variable": [
                        {
                          "key": "id"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n \"firstName\": \"John\",\n \"lastName\": \"Smith\",\n \"email\": \"johnsmith99@gmail.com\",\n \"dateOfBirth\": \"1999-04-27\",\n \"homeAddress\": {\n  \"country\": \"New Zealand\",\n  \"streetNumber\": \"3/24\",\n  \"streetName\": \"Ilam Road\",\n  \"suburb\": \"Upper Riccarton\",\n  \"city\": \"Christchurch\",\n  \"region\": \"Canterbury\",\n  \"postcode\": \"90210\"\n },\n \"id\": 100,\n \"middleName\": \"Hector\",\n \"nickname\": \"Jonny\",\n \"bio\": \"Likes long walks on the beach\",\n \"phoneNumber\": \"+64 3 555 0129\",\n \"created\": \"2020-07-14T14:32:00Z\",\n \"role\": \"defaultGlobalApplicationAdmin\",\n \"businessesAdministered\": [\n  {\n   \"name\": \"Lumbridge General Store\",\n   \"address\": {\n    \"country\": \"New Zealand\",\n    \"streetNumber\": \"3/24\",\n    \"streetName\": \"Ilam Road\",\n    \"suburb\": \"Upper Riccarton\",\n    \"city\": \"Christchurch\",\n    \"region\": \"Canterbury\",\n    \"postcode\": \"90210\"\n   },\n   \"businessType\": \"Charitable organisation\",\n   \"id\": 100,\n   \"administrators\": [\n    {\n     \"firstName\": \"John\",\n     \"lastName\": \"Smith\",\n     \"email\": \"johnsmith99@gmail.com\",\n     \"dateOfBirth\": \"1999-04-27\",\n     \"homeAddress\": {\n      \"country\": \"New Zealand\",\n      \"streetNumber\": \"3/24\",\n      \"streetName\": \"Ilam Road\",\n      \"suburb\": \"Upper Riccarton\",\n      \"city\": \"Christchurch\",\n      \"region\": \"Canterbury\",\n      \"postcode\": \"90210\"\n     },\n     \"id\": 100,\n     \"middleName\": \"Hector\",\n     \"nickname\": \"Jonny\",\n     \"bio\": \"Likes long walks on the beach\",\n     \"phoneNumber\": \"+64 3 555 0129\",\n     \"created\": \"2020-07-14T14:32:00Z\",\n     \"role\": \"defaultGlobalApplicationAdmin\",\n     \"businessesAdministered\": [\n      {\n       \"value\": \"<Circular reference to #/components/schemas/Business detected>\"\n      },\n      {\n       \"value\": \"<Circular reference to #/components/schemas/Business detected>\"\n      }\n     ]\n    },\n    {\n     \"firstName\": \"John\",\n     \"lastName\": \"Smith\",\n     \"email\": \"johnsmith99@gmail.com\",\n     \"dateOfBirth\": \"1999-04-27\",\n     \"homeAddress\": {\n      \"country\": \"New Zealand\",\n      \"streetNumber\": \"3/24\",\n      \"streetName\": \"Ilam Road\",\n      \"suburb\": \"Upper Riccarton\",\n      \"city\": \"Christchurch\",\n      \"region\": \"Canterbury\",\n      \"postcode\": \"90210\"\n     },\n     \"id\": 100,\n     \"middleName\": \"Hector\",\n     \"nickname\": \"Jonny\",\n     \"bio\": \"Likes long walks on the beach\",\n     \"phoneNumber\": \"+64 3 555 0129\",\n     \"created\": \"2020-07-14T14:32:00Z\",\n     \"role\": \"defaultGlobalApplicationAdmin\",\n     \"businessesAdministered\": [\n      {\n       \"value\": \"<Circular reference to #/components/schemas/Business detected>\"\n      },\n      {\n       \"value\": \"<Circular reference to #/components/schemas/Business detected>\"\n      }\n     ]\n    }\n   ],\n   \"primaryAdministratorId\": 20,\n   \"description\": \"A one-stop shop for all your adventuring needs\",\n   \"created\": \"2020-07-14T14:52:00Z\"\n  },\n  {\n   \"name\": \"Lumbridge General Store\",\n   \"address\": {\n    \"country\": \"New Zealand\",\n    \"streetNumber\": \"3/24\",\n    \"streetName\": \"Ilam Road\",\n    \"suburb\": \"Upper Riccarton\",\n    \"city\": \"Christchurch\",\n    \"region\": \"Canterbury\",\n    \"postcode\": \"90210\"\n   },\n   \"businessType\": \"Non-profit organisation\",\n   \"id\": 100,\n   \"administrators\": [\n    {\n     \"firstName\": \"John\",\n     \"lastName\": \"Smith\",\n     \"email\": \"johnsmith99@gmail.com\",\n     \"dateOfBirth\": \"1999-04-27\",\n     \"homeAddress\": {\n      \"country\": \"New Zealand\",\n      \"streetNumber\": \"3/24\",\n      \"streetName\": \"Ilam Road\",\n      \"suburb\": \"Upper Riccarton\",\n      \"city\": \"Christchurch\",\n      \"region\": \"Canterbury\",\n      \"postcode\": \"90210\"\n     },\n     \"id\": 100,\n     \"middleName\": \"Hector\",\n     \"nickname\": \"Jonny\",\n     \"bio\": \"Likes long walks on the beach\",\n     \"phoneNumber\": \"+64 3 555 0129\",\n     \"created\": \"2020-07-14T14:32:00Z\",\n     \"role\": \"defaultGlobalApplicationAdmin\",\n     \"businessesAdministered\": [\n      {\n       \"value\": \"<Circular reference to #/components/schemas/Business detected>\"\n      },\n      {\n       \"value\": \"<Circular reference to #/components/schemas/Business detected>\"\n      }\n     ]\n    },\n    {\n     \"firstName\": \"John\",\n     \"lastName\": \"Smith\",\n     \"email\": \"johnsmith99@gmail.com\",\n     \"dateOfBirth\": \"1999-04-27\",\n     \"homeAddress\": {\n      \"country\": \"New Zealand\",\n      \"streetNumber\": \"3/24\",\n      \"streetName\": \"Ilam Road\",\n      \"suburb\": \"Upper Riccarton\",\n      \"city\": \"Christchurch\",\n      \"region\": \"Canterbury\",\n      \"postcode\": \"90210\"\n     },\n     \"id\": 100,\n     \"middleName\": \"Hector\",\n     \"nickname\": \"Jonny\",\n     \"bio\": \"Likes long walks on the beach\",\n     \"phoneNumber\": \"+64 3 555 0129\",\n     \"created\": \"2020-07-14T14:32:00Z\",\n     \"role\": \"defaultGlobalApplicationAdmin\",\n     \"businessesAdministered\": [\n      {\n       \"value\": \"<Circular reference to #/components/schemas/Business detected>\"\n      },\n      {\n       \"value\": \"<Circular reference to #/components/schemas/Business detected>\"\n      }\n     ]\n    }\n   ],\n   \"primaryAdministratorId\": 20,\n   \"description\": \"A one-stop shop for all your adventuring needs\",\n   \"created\": \"2020-07-14T14:52:00Z\"\n  }\n ]\n}"
                },
                {
                  "name": "Access token is missing or invalid",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "description": "Added as a part of security scheme: apikey",
                        "key": "JSESSIONID",
                        "value": "<API Key>"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/users/:id",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "users",
                        ":id"
                      ],
                      "variable": [
                        {
                          "key": "id"
                        }
                      ]
                    }
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "body": ""
                },
                {
                  "name": "The requested route does exist (so not a 404) but some part of the request is not acceptable, for example trying to access a resource by an ID that does not exist.",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "description": "Added as a part of security scheme: apikey",
                        "key": "JSESSIONID",
                        "value": "<API Key>"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/users/:id",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "users",
                        ":id"
                      ],
                      "variable": [
                        {
                          "key": "id"
                        }
                      ]
                    }
                  },
                  "status": "Not Acceptable",
                  "code": 406,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "body": ""
                }
              ]
            },
            {
              "name": "Promote a user account to the Global Application Admin role",
              "request": {
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "JSESSIONID",
                      "type": "string"
                    },
                    {
                      "key": "value",
                      "value": true,
                      "type": "boolean"
                    },
                    {
                      "key": "in",
                      "value": "header",
                      "type": "string"
                    }
                  ]
                },
                "method": "PUT",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users/{{userId}}/makeadmin",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    "{{userId}}",
                    "makeadmin"
                  ]
                }
              },
              "response": [
                {
                  "name": "Action completed successfully",
                  "originalRequest": {
                    "method": "PUT",
                    "header": [
                      {
                        "description": "Added as a part of security scheme: apikey",
                        "key": "JSESSIONID",
                        "value": "<API Key>"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/users/:id/makeadmin",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "users",
                        ":id",
                        "makeadmin"
                      ],
                      "variable": [
                        {
                          "key": "id"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "body": ""
                },
                {
                  "name": "Access token is missing or invalid",
                  "originalRequest": {
                    "method": "PUT",
                    "header": [
                      {
                        "description": "Added as a part of security scheme: apikey",
                        "key": "JSESSIONID",
                        "value": "<API Key>"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/users/:id/makeadmin",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "users",
                        ":id",
                        "makeadmin"
                      ],
                      "variable": [
                        {
                          "key": "id"
                        }
                      ]
                    }
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "body": ""
                },
                {
                  "name": "The user does not have permission to perform the requested action",
                  "originalRequest": {
                    "method": "PUT",
                    "header": [
                      {
                        "description": "Added as a part of security scheme: apikey",
                        "key": "JSESSIONID",
                        "value": "<API Key>"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/users/:id/makeadmin",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "users",
                        ":id",
                        "makeadmin"
                      ],
                      "variable": [
                        {
                          "key": "id"
                        }
                      ]
                    }
                  },
                  "status": "Forbidden",
                  "code": 403,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "body": ""
                },
                {
                  "name": "The requested route does exist (so not a 404) but some part of the request is not acceptable, for example trying to access a resource by an ID that does not exist.",
                  "originalRequest": {
                    "method": "PUT",
                    "header": [
                      {
                        "description": "Added as a part of security scheme: apikey",
                        "key": "JSESSIONID",
                        "value": "<API Key>"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/users/:id/makeadmin",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "users",
                        ":id",
                        "makeadmin"
                      ],
                      "variable": [
                        {
                          "key": "id"
                        }
                      ]
                    }
                  },
                  "status": "Not Acceptable",
                  "code": 406,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "body": ""
                }
              ]
            },
            {
              "name": "Revokes the Global Application Admin role from a user account",
              "request": {
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "JSESSIONID",
                      "type": "string"
                    },
                    {
                      "key": "value",
                      "value": true,
                      "type": "boolean"
                    },
                    {
                      "key": "in",
                      "value": "header",
                      "type": "string"
                    }
                  ]
                },
                "method": "PUT",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users/{{userId}}/revokeadmin",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    "{{userId}}",
                    "revokeadmin"
                  ]
                }
              },
              "response": [
                {
                  "name": "Action completed successfully",
                  "originalRequest": {
                    "method": "PUT",
                    "header": [
                      {
                        "description": "Added as a part of security scheme: apikey",
                        "key": "JSESSIONID",
                        "value": "<API Key>"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/users/:id/revokeadmin",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "users",
                        ":id",
                        "revokeadmin"
                      ],
                      "variable": [
                        {
                          "key": "id"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "body": ""
                },
                {
                  "name": "Access token is missing or invalid",
                  "originalRequest": {
                    "method": "PUT",
                    "header": [
                      {
                        "description": "Added as a part of security scheme: apikey",
                        "key": "JSESSIONID",
                        "value": "<API Key>"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/users/:id/revokeadmin",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "users",
                        ":id",
                        "revokeadmin"
                      ],
                      "variable": [
                        {
                          "key": "id"
                        }
                      ]
                    }
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "body": ""
                },
                {
                  "name": "The user does not have permission to perform the requested action",
                  "originalRequest": {
                    "method": "PUT",
                    "header": [
                      {
                        "description": "Added as a part of security scheme: apikey",
                        "key": "JSESSIONID",
                        "value": "<API Key>"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/users/:id/revokeadmin",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "users",
                        ":id",
                        "revokeadmin"
                      ],
                      "variable": [
                        {
                          "key": "id"
                        }
                      ]
                    }
                  },
                  "status": "Forbidden",
                  "code": 403,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "body": ""
                },
                {
                  "name": "The requested route does exist (so not a 404) but some part of the request is not acceptable, for example trying to access a resource by an ID that does not exist.",
                  "originalRequest": {
                    "method": "PUT",
                    "header": [
                      {
                        "description": "Added as a part of security scheme: apikey",
                        "key": "JSESSIONID",
                        "value": "<API Key>"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/users/:id/revokeadmin",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "users",
                        ":id",
                        "revokeadmin"
                      ],
                      "variable": [
                        {
                          "key": "id"
                        }
                      ]
                    }
                  },
                  "status": "Not Acceptable",
                  "code": 406,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "body": ""
                },
                {
                  "name": "Returned when the DGAA tries to revoke their own admin status, this is not an allowed action.",
                  "originalRequest": {
                    "method": "PUT",
                    "header": [
                      {
                        "description": "Added as a part of security scheme: apikey",
                        "key": "JSESSIONID",
                        "value": "<API Key>"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/users/:id/revokeadmin",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "users",
                        ":id",
                        "revokeadmin"
                      ],
                      "variable": [
                        {
                          "key": "id"
                        }
                      ]
                    }
                  },
                  "status": "Conflict",
                  "code": 409,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "body": ""
                }
              ]
            },
            {
              "name": "Retrieve all active cards that a user has created",
              "request": {
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "JSESSIONID",
                      "type": "string"
                    },
                    {
                      "key": "value",
                      "value": true,
                      "type": "boolean"
                    },
                    {
                      "key": "in",
                      "value": "header",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users/{{userId}}/cards",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    "{{userId}}",
                    "cards"
                  ]
                }
              },
              "response": [
                {
                  "name": "Request successful, a (possibly empty) list of cards is returned",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "description": "Added as a part of security scheme: apikey",
                        "key": "JSESSIONID",
                        "value": "<API Key>"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/users/:id/cards",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "users",
                        ":id",
                        "cards"
                      ],
                      "variable": [
                        {
                          "key": "id"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "body": "[\n {\n  \"title\": \"1982 Lada Samara\",\n  \"section\": \"ForSale\",\n  \"id\": 500,\n  \"creator\": {\n   \"firstName\": \"John\",\n   \"lastName\": \"Smith\",\n   \"email\": \"johnsmith99@gmail.com\",\n   \"dateOfBirth\": \"1999-04-27\",\n   \"homeAddress\": {\n    \"country\": \"New Zealand\",\n    \"streetNumber\": \"3/24\",\n    \"streetName\": \"Ilam Road\",\n    \"suburb\": \"Upper Riccarton\",\n    \"city\": \"Christchurch\",\n    \"region\": \"Canterbury\",\n    \"postcode\": \"90210\"\n   },\n   \"id\": 100,\n   \"middleName\": \"Hector\",\n   \"nickname\": \"Jonny\",\n   \"bio\": \"Likes long walks on the beach\",\n   \"phoneNumber\": \"+64 3 555 0129\",\n   \"created\": \"2020-07-14T14:32:00Z\",\n   \"role\": \"defaultGlobalApplicationAdmin\",\n   \"businessesAdministered\": [\n    {\n     \"value\": \"<Circular reference to #/components/schemas/Business detected>\"\n    },\n    {\n     \"value\": \"<Circular reference to #/components/schemas/Business detected>\"\n    }\n   ]\n  },\n  \"created\": \"2021-07-15T05:10:00Z\",\n  \"displayPeriodEnd\": \"2021-07-29T05:10:00Z\",\n  \"description\": \"Beige, suitable for a hen house. Fair condition. Some rust. As is, where is. Will swap for budgerigar.\",\n  \"keywords\": [\n   {\n    \"id\": 600,\n    \"name\": \"Vehicle\",\n    \"created\": \"2021-07-15T05:10:00Z\"\n   },\n   {\n    \"id\": 600,\n    \"name\": \"Vehicle\",\n    \"created\": \"2021-07-15T05:10:00Z\"\n   }\n  ]\n },\n {\n  \"title\": \"1982 Lada Samara\",\n  \"section\": \"ForSale\",\n  \"id\": 500,\n  \"creator\": {\n   \"firstName\": \"John\",\n   \"lastName\": \"Smith\",\n   \"email\": \"johnsmith99@gmail.com\",\n   \"dateOfBirth\": \"1999-04-27\",\n   \"homeAddress\": {\n    \"country\": \"New Zealand\",\n    \"streetNumber\": \"3/24\",\n    \"streetName\": \"Ilam Road\",\n    \"suburb\": \"Upper Riccarton\",\n    \"city\": \"Christchurch\",\n    \"region\": \"Canterbury\",\n    \"postcode\": \"90210\"\n   },\n   \"id\": 100,\n   \"middleName\": \"Hector\",\n   \"nickname\": \"Jonny\",\n   \"bio\": \"Likes long walks on the beach\",\n   \"phoneNumber\": \"+64 3 555 0129\",\n   \"created\": \"2020-07-14T14:32:00Z\",\n   \"role\": \"user\",\n   \"businessesAdministered\": [\n    {\n     \"value\": \"<Circular reference to #/components/schemas/Business detected>\"\n    },\n    {\n     \"value\": \"<Circular reference to #/components/schemas/Business detected>\"\n    }\n   ]\n  },\n  \"created\": \"2021-07-15T05:10:00Z\",\n  \"displayPeriodEnd\": \"2021-07-29T05:10:00Z\",\n  \"description\": \"Beige, suitable for a hen house. Fair condition. Some rust. As is, where is. Will swap for budgerigar.\",\n  \"keywords\": [\n   {\n    \"id\": 600,\n    \"name\": \"Vehicle\",\n    \"created\": \"2021-07-15T05:10:00Z\"\n   },\n   {\n    \"id\": 600,\n    \"name\": \"Vehicle\",\n    \"created\": \"2021-07-15T05:10:00Z\"\n   }\n  ]\n }\n]"
                },
                {
                  "name": "There was some error with the data supplied by the user, appropriate error message(s) should be shown to user",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "description": "Added as a part of security scheme: apikey",
                        "key": "JSESSIONID",
                        "value": "<API Key>"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/users/:id/cards",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "users",
                        ":id",
                        "cards"
                      ],
                      "variable": [
                        {
                          "key": "id"
                        }
                      ]
                    }
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "body": ""
                },
                {
                  "name": "Access token is missing or invalid",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "description": "Added as a part of security scheme: apikey",
                        "key": "JSESSIONID",
                        "value": "<API Key>"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/users/:id/cards",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "users",
                        ":id",
                        "cards"
                      ],
                      "variable": [
                        {
                          "key": "id"
                        }
                      ]
                    }
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "body": ""
                },
                {
                  "name": "The requested route does exist (so not a 404) but some part of the request is not acceptable, for example trying to access a resource by an ID that does not exist.",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "description": "Added as a part of security scheme: apikey",
                        "key": "JSESSIONID",
                        "value": "<API Key>"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/users/:id/cards",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "users",
                        ":id",
                        "cards"
                      ],
                      "variable": [
                        {
                          "key": "id"
                        }
                      ]
                    }
                  },
                  "status": "Not Acceptable",
                  "code": 406,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "body": ""
                }
              ]
            }
          ]
        },
        {
          "name": "Create a new user account",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"firstName\": \"John\",\n    \"lastName\": \"Smith\",\n    \"email\": \"johnsmith99@gmail.com\",\n    \"dateOfBirth\": \"1999-04-27\",\n    \"homeAddress\": {\n        \"country\": \"New Zealand\",\n        \"streetNumber\": \"3/24\",\n        \"streetName\": \"Ilam Road\",\n        \"suburb\": \"Upper Riccarton\",\n        \"city\": \"Christchurch\",\n        \"region\": \"Canterbury\",\n        \"postcode\": \"90210\"\n    },\n    \"password\": \"1337-H%nt3r2\",\n    \"middleName\": \"Hector\",\n    \"nickname\": \"Jonny\",\n    \"bio\": \"Likes long walks on the beach\",\n    \"phoneNumber\": \"+64 3 555 0129\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users"
              ]
            }
          },
          "response": [
            {
              "name": "Response returned to client when they have performed an action to gain authentication (registering or logging in). This response includes a session token that the client can use in future API requests to authenticate itself.  This session token is set as ",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "description": "Added as a part of security scheme: apikey",
                    "key": "JSESSIONID",
                    "value": "<API Key>"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"firstName\": \"John\",\n    \"lastName\": \"Smith\",\n    \"email\": \"johnsmith99@gmail.com\",\n    \"dateOfBirth\": \"1999-04-27\",\n    \"homeAddress\": {\n        \"country\": \"New Zealand\",\n        \"streetNumber\": \"3/24\",\n        \"streetName\": \"Ilam Road\",\n        \"suburb\": \"Upper Riccarton\",\n        \"city\": \"Christchurch\",\n        \"region\": \"Canterbury\",\n        \"postcode\": \"90210\"\n    },\n    \"password\": \"1337-H%nt3r2\",\n    \"middleName\": \"Hector\",\n    \"nickname\": \"Jonny\",\n    \"bio\": \"Likes long walks on the beach\",\n    \"phoneNumber\": \"+64 3 555 0129\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/users",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users"
                  ]
                }
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Set-Cookie",
                  "value": "JSESSIONID=abcde12345; Path=/; HttpOnly",
                  "description": ""
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n \"userId\": 100\n}"
            },
            {
              "name": "There was some error with the data supplied by the user, appropriate error message(s) should be shown to user",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "description": "Added as a part of security scheme: apikey",
                    "key": "JSESSIONID",
                    "value": "<API Key>"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"firstName\": \"John\",\n    \"lastName\": \"Smith\",\n    \"email\": \"johnsmith99@gmail.com\",\n    \"dateOfBirth\": \"1999-04-27\",\n    \"homeAddress\": {\n        \"country\": \"New Zealand\",\n        \"streetNumber\": \"3/24\",\n        \"streetName\": \"Ilam Road\",\n        \"suburb\": \"Upper Riccarton\",\n        \"city\": \"Christchurch\",\n        \"region\": \"Canterbury\",\n        \"postcode\": \"90210\"\n    },\n    \"password\": \"1337-H%nt3r2\",\n    \"middleName\": \"Hector\",\n    \"nickname\": \"Jonny\",\n    \"bio\": \"Likes long walks on the beach\",\n    \"phoneNumber\": \"+64 3 555 0129\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/users",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users"
                  ]
                }
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Email address already in use",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "description": "Added as a part of security scheme: apikey",
                    "key": "JSESSIONID",
                    "value": "<API Key>"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"firstName\": \"John\",\n    \"lastName\": \"Smith\",\n    \"email\": \"johnsmith99@gmail.com\",\n    \"dateOfBirth\": \"1999-04-27\",\n    \"homeAddress\": {\n        \"country\": \"New Zealand\",\n        \"streetNumber\": \"3/24\",\n        \"streetName\": \"Ilam Road\",\n        \"suburb\": \"Upper Riccarton\",\n        \"city\": \"Christchurch\",\n        \"region\": \"Canterbury\",\n        \"postcode\": \"90210\"\n    },\n    \"password\": \"1337-H%nt3r2\",\n    \"middleName\": \"Hector\",\n    \"nickname\": \"Jonny\",\n    \"bio\": \"Likes long walks on the beach\",\n    \"phoneNumber\": \"+64 3 555 0129\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/users",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users"
                  ]
                }
              },
              "status": "Conflict",
              "code": 409,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Attempt to authenticate a user account with a username and password",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"userId\", jsonData.userId);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"johnsmith99@gmail.com\",\n    \"password\": \"1337-H%nt3r2\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/login",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "login"
              ]
            }
          },
          "response": [
            {
              "name": "Response returned to client when they have performed an action to gain authentication (registering or logging in). This response includes a session token that the client can use in future API requests to authenticate itself.  This session token is set as ",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "description": "Added as a part of security scheme: apikey",
                    "key": "JSESSIONID",
                    "value": "<API Key>"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"johnsmith99@gmail.com\",\n    \"password\": \"1337-H%nt3r2\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/login",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "login"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Set-Cookie",
                  "value": "JSESSIONID=abcde12345; Path=/; HttpOnly",
                  "description": ""
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n \"userId\": 100\n}"
            },
            {
              "name": "Failed login attempt, email or password incorrect",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "description": "Added as a part of security scheme: apikey",
                    "key": "JSESSIONID",
                    "value": "<API Key>"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"johnsmith99@gmail.com\",\n    \"password\": \"1337-H%nt3r2\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/login",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "login"
                  ]
                }
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Login (Dawson)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "pm.environment.set(\"userId\", jsonData.userId);",
                  "pm.environment.set(\"loginRequest\", pm.request);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"dnb36@uclive.ac.nz\",\n    \"password\": \"fun123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/login",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "login"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Search for users by some criteria, for now: their name",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var _ = require('lodash');",
                  "",
                  "var jsonData = pm.response.json();",
                  "",
                  "",
                  "// Test status code",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "",
                  "// Test that totalCount is a Number and is between 0 & the amount of data returned",
                  "pm.test(\"'totalCount' returns a valid number\", function () {",
                  "    pm.expect(jsonData.totalCount).to.satisfy((count) => !isNaN(count));",
                  "    pm.expect(jsonData.totalCount).to.above(jsonData.results.length-1);",
                  "});",
                  "",
                  "",
                  "// Test the size of results match pagination indexes",
                  "pm.test(\"Pagination indices return valid results\", function () {",
                  "    pagStartIndex = pm.environment.get(\"pagStartIndex\");",
                  "    // If start index is null then simplify it to zero",
                  "    pagStartIndex = !pagStartIndex ? 0 : pagStartIndex;",
                  "    pagEndIndex = pm.environment.get(\"pagEndIndex\");",
                  "    resLength = jsonData.results.length;",
                  "    totalCount = Number(jsonData.totalCount);",
                  "",
                  "    if (!pagEndIndex || pagEndIndex >= totalCount) {",
                  "        pm.expect(resLength).to.eql(totalCount - pagStartIndex);",
                  "    } else {",
                  "        pm.expect(resLength).to.eql(pagEndIndex - pagStartIndex + 1);",
                  "    }",
                  "});",
                  "",
                  "",
                  "// Test the response schema is correct",
                  "var schema = {",
                  "    \"properties\": {",
                  "        \"results\": {",
                  "            \"type\": \"array\",",
                  "            \"items\": {",
                  "                \"type\": \"object\"",
                  "            }",
                  "        },",
                  "        \"totalCount\": {",
                  "            \"type\": \"number\"",
                  "        }",
                  "    },",
                  "    \"required\": [\"results\", \"totalCount\"]",
                  "};",
                  "",
                  "pm.test('Response body is in expected schema', function () {",
                  "    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
                  "});",
                  "",
                  "",
                  "",
                  "// Increment the test index value, used to cycle through query params",
                  "utils.incrementTestIndex(pm.collectionVariables);",
                  "",
                  "sortBy = pm.environment.get(\"sortBy\");",
                  "// Match the lodash format (asc/desc)",
                  "isAscending = pm.environment.get(\"isAscending\") == \"yes\" ? \"asc\" : \"desc\";",
                  "",
                  "pm.test('User ' + sortBy + 's are in ' + isAscending + ' sorted order', () => {",
                  "   // Using the orderBy function from lodash ",
                  "   // Read docs: https://lodash.com/docs/4.17.10#orderBy",
                  "",
                  "   // I use `({ sortBy }) => sortBy || ''` so that nulls are ordered last in Ascending order to match the API",
                  "    var expectedSortedOrder = _.orderBy(jsonData.results, [( o ) => { return o[sortBy] || ''}],[isAscending]);",
                  "",
                  "    pm.expect(jsonData.results).to.eql(expectedSortedOrder);    ",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "var index = utils.getTestIndex(pm.collectionVariables);  // getting the current index value",
                  "",
                  "// List the possible values to cycle through",
                  "sortByValues = [\"firstName\", \"middleName\", \"lastName\", \"nickname\"];",
                  "isAscendingValues = [\"yes\", \"no\"];",
                  "pagIndexValues = [[0, \"\"], [0, 1], [2, 5]]  // In (start, end) format where `start` is pagStartIndex",
                  "",
                  "// Set the values as env vars, used as query params",
                  "sortByIndex = (Math.floor(index / 2)) % sortByValues.length;",
                  "isAscendingIndex = index % isAscendingValues.length;",
                  "pagIndexIndex = index % pagIndexValues.length;",
                  "pm.environment.set(\"sortBy\", sortByValues[sortByIndex]);",
                  "pm.environment.set(\"isAscending\", isAscendingValues[isAscendingIndex]);",
                  "pm.environment.set(\"pagStartIndex\", pagIndexValues[pagIndexIndex][0]);",
                  "pm.environment.set(\"pagEndIndex\", pagIndexValues[pagIndexIndex][1]);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "JSESSIONID",
                  "type": "string"
                },
                {
                  "key": "value",
                  "value": true,
                  "type": "boolean"
                },
                {
                  "key": "in",
                  "value": "header",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users/search?searchQuery={{searchQuery}}&sortBy={{sortBy}}&isAscending={{isAscending}}&pagStartIndex={{pagStartIndex}}&pagEndIndex={{pagEndIndex}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                "search"
              ],
              "query": [
                {
                  "key": "searchQuery",
                  "value": "{{searchQuery}}",
                  "description": "(Required) Criteria to search users for, e.g: user’s full name or one or more of their names/nickname"
                },
                {
                  "key": "sortBy",
                  "value": "{{sortBy}}"
                },
                {
                  "key": "isAscending",
                  "value": "{{isAscending}}"
                },
                {
                  "key": "pagStartIndex",
                  "value": "{{pagStartIndex}}"
                },
                {
                  "key": "pagEndIndex",
                  "value": "{{pagEndIndex}}"
                }
              ]
            }
          },
          "response": [
            {
              "name": "Request successful, a (possibly empty) list of users is returned",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "description": "Added as a part of security scheme: apikey",
                    "key": "JSESSIONID",
                    "value": "<API Key>"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/users/search?searchQuery=Duis",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    "search"
                  ],
                  "query": [
                    {
                      "key": "searchQuery",
                      "value": "Duis"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "[\n {\n  \"firstName\": \"John\",\n  \"lastName\": \"Smith\",\n  \"email\": \"johnsmith99@gmail.com\",\n  \"dateOfBirth\": \"1999-04-27\",\n  \"homeAddress\": {\n   \"country\": \"New Zealand\",\n   \"streetNumber\": \"3/24\",\n   \"streetName\": \"Ilam Road\",\n   \"suburb\": \"Upper Riccarton\",\n   \"city\": \"Christchurch\",\n   \"region\": \"Canterbury\",\n   \"postcode\": \"90210\"\n  },\n  \"id\": 100,\n  \"middleName\": \"Hector\",\n  \"nickname\": \"Jonny\",\n  \"bio\": \"Likes long walks on the beach\",\n  \"phoneNumber\": \"+64 3 555 0129\",\n  \"created\": \"2020-07-14T14:32:00Z\",\n  \"role\": \"globalApplicationAdmin\",\n  \"businessesAdministered\": [\n   {\n    \"value\": \"<Circular reference to #/components/schemas/Business detected>\"\n   },\n   {\n    \"value\": \"<Circular reference to #/components/schemas/Business detected>\"\n   }\n  ]\n },\n {\n  \"firstName\": \"John\",\n  \"lastName\": \"Smith\",\n  \"email\": \"johnsmith99@gmail.com\",\n  \"dateOfBirth\": \"1999-04-27\",\n  \"homeAddress\": {\n   \"country\": \"New Zealand\",\n   \"streetNumber\": \"3/24\",\n   \"streetName\": \"Ilam Road\",\n   \"suburb\": \"Upper Riccarton\",\n   \"city\": \"Christchurch\",\n   \"region\": \"Canterbury\",\n   \"postcode\": \"90210\"\n  },\n  \"id\": 100,\n  \"middleName\": \"Hector\",\n  \"nickname\": \"Jonny\",\n  \"bio\": \"Likes long walks on the beach\",\n  \"phoneNumber\": \"+64 3 555 0129\",\n  \"created\": \"2020-07-14T14:32:00Z\",\n  \"role\": \"globalApplicationAdmin\",\n  \"businessesAdministered\": [\n   {\n    \"value\": \"<Circular reference to #/components/schemas/Business detected>\"\n   },\n   {\n    \"value\": \"<Circular reference to #/components/schemas/Business detected>\"\n   }\n  ]\n }\n]"
            },
            {
              "name": "Access token is missing or invalid",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "description": "Added as a part of security scheme: apikey",
                    "key": "JSESSIONID",
                    "value": "<API Key>"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/users/search?searchQuery=Duis",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    "search"
                  ],
                  "query": [
                    {
                      "key": "searchQuery",
                      "value": "Duis"
                    }
                  ]
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        }
      ]
    },
    {
      "name": "businesses",
      "item": [
        {
          "name": "products",
          "item": [
            {
              "name": "images",
              "item": [
                {
                  "name": "{image Id}",
                  "item": [
                    {
                      "name": "Delete an image of a product",
                      "request": {
                        "auth": {
                          "type": "apikey",
                          "apikey": [
                            {
                              "key": "key",
                              "value": "JSESSIONID",
                              "type": "string"
                            },
                            {
                              "key": "value",
                              "value": true,
                              "type": "boolean"
                            },
                            {
                              "key": "in",
                              "value": "header",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "DELETE",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/businesses/{{businessId}}/products/:productId/images/:imageId",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            "businesses",
                            "{{businessId}}",
                            "products",
                            ":productId",
                            "images",
                            ":imageId"
                          ],
                          "variable": [
                            {
                              "key": "productId",
                              "value": "Duis",
                              "description": "(Required) ID (Product Code) of product to delete image for"
                            },
                            {
                              "key": "imageId",
                              "value": "12684656",
                              "description": "(Required) ID of the image to delete"
                            }
                          ]
                        }
                      },
                      "response": [
                        {
                          "name": "Image deleted successfully",
                          "originalRequest": {
                            "method": "DELETE",
                            "header": [
                              {
                                "description": "Added as a part of security scheme: apikey",
                                "key": "JSESSIONID",
                                "value": "<API Key>"
                              }
                            ],
                            "url": {
                              "raw": "{{baseUrl}}/businesses/:businessId/products/:productId/images/:imageId",
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "path": [
                                "businesses",
                                ":businessId",
                                "products",
                                ":productId",
                                "images",
                                ":imageId"
                              ],
                              "variable": [
                                {
                                  "key": "businessId"
                                },
                                {
                                  "key": "productId"
                                },
                                {
                                  "key": "imageId"
                                }
                              ]
                            }
                          },
                          "status": "OK",
                          "code": 200,
                          "_postman_previewlanguage": "text",
                          "header": [
                            {
                              "key": "Content-Type",
                              "value": "text/plain"
                            }
                          ],
                          "cookie": [],
                          "body": ""
                        },
                        {
                          "name": "Access token is missing or invalid",
                          "originalRequest": {
                            "method": "DELETE",
                            "header": [
                              {
                                "description": "Added as a part of security scheme: apikey",
                                "key": "JSESSIONID",
                                "value": "<API Key>"
                              }
                            ],
                            "url": {
                              "raw": "{{baseUrl}}/businesses/:businessId/products/:productId/images/:imageId",
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "path": [
                                "businesses",
                                ":businessId",
                                "products",
                                ":productId",
                                "images",
                                ":imageId"
                              ],
                              "variable": [
                                {
                                  "key": "businessId"
                                },
                                {
                                  "key": "productId"
                                },
                                {
                                  "key": "imageId"
                                }
                              ]
                            }
                          },
                          "status": "Unauthorized",
                          "code": 401,
                          "_postman_previewlanguage": "text",
                          "header": [
                            {
                              "key": "Content-Type",
                              "value": "text/plain"
                            }
                          ],
                          "cookie": [],
                          "body": ""
                        },
                        {
                          "name": "Forbidden: Returned when a user tries to delete an image for a product that it is in a catalogue for a business they do not administer AND the user is not a global application admin",
                          "originalRequest": {
                            "method": "DELETE",
                            "header": [
                              {
                                "description": "Added as a part of security scheme: apikey",
                                "key": "JSESSIONID",
                                "value": "<API Key>"
                              }
                            ],
                            "url": {
                              "raw": "{{baseUrl}}/businesses/:businessId/products/:productId/images/:imageId",
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "path": [
                                "businesses",
                                ":businessId",
                                "products",
                                ":productId",
                                "images",
                                ":imageId"
                              ],
                              "variable": [
                                {
                                  "key": "businessId"
                                },
                                {
                                  "key": "productId"
                                },
                                {
                                  "key": "imageId"
                                }
                              ]
                            }
                          },
                          "status": "Forbidden",
                          "code": 403,
                          "_postman_previewlanguage": "text",
                          "header": [
                            {
                              "key": "Content-Type",
                              "value": "text/plain"
                            }
                          ],
                          "cookie": [],
                          "body": ""
                        },
                        {
                          "name": "The requested route does exist (so not a 404) but some part of the request is not acceptable, for example trying to access a resource by an ID that does not exist.",
                          "originalRequest": {
                            "method": "DELETE",
                            "header": [
                              {
                                "description": "Added as a part of security scheme: apikey",
                                "key": "JSESSIONID",
                                "value": "<API Key>"
                              }
                            ],
                            "url": {
                              "raw": "{{baseUrl}}/businesses/:businessId/products/:productId/images/:imageId",
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "path": [
                                "businesses",
                                ":businessId",
                                "products",
                                ":productId",
                                "images",
                                ":imageId"
                              ],
                              "variable": [
                                {
                                  "key": "businessId"
                                },
                                {
                                  "key": "productId"
                                },
                                {
                                  "key": "imageId"
                                }
                              ]
                            }
                          },
                          "status": "Not Acceptable",
                          "code": 406,
                          "_postman_previewlanguage": "text",
                          "header": [
                            {
                              "key": "Content-Type",
                              "value": "text/plain"
                            }
                          ],
                          "cookie": [],
                          "body": ""
                        }
                      ]
                    },
                    {
                      "name": "Set an existing image to be the new primary image for some product",
                      "request": {
                        "auth": {
                          "type": "apikey",
                          "apikey": [
                            {
                              "key": "key",
                              "value": "JSESSIONID",
                              "type": "string"
                            },
                            {
                              "key": "value",
                              "value": true,
                              "type": "boolean"
                            },
                            {
                              "key": "in",
                              "value": "header",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/businesses/{{businessId}}/products/:productId/images/:imageId/makeprimary",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            "businesses",
                            "{{businessId}}",
                            "products",
                            ":productId",
                            "images",
                            ":imageId",
                            "makeprimary"
                          ],
                          "variable": [
                            {
                              "key": "productId",
                              "value": "Duis",
                              "description": "(Required) ID (Product Code) of product to update primary image for"
                            },
                            {
                              "key": "imageId",
                              "value": "12684656",
                              "description": "(Required) ID of the image to set as being the primary image for product"
                            }
                          ]
                        }
                      },
                      "response": [
                        {
                          "name": "Primary image successfully updated",
                          "originalRequest": {
                            "method": "PUT",
                            "header": [
                              {
                                "description": "Added as a part of security scheme: apikey",
                                "key": "JSESSIONID",
                                "value": "<API Key>"
                              }
                            ],
                            "url": {
                              "raw": "{{baseUrl}}/businesses/:businessId/products/:productId/images/:imageId/makeprimary",
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "path": [
                                "businesses",
                                ":businessId",
                                "products",
                                ":productId",
                                "images",
                                ":imageId",
                                "makeprimary"
                              ],
                              "variable": [
                                {
                                  "key": "businessId"
                                },
                                {
                                  "key": "productId"
                                },
                                {
                                  "key": "imageId"
                                }
                              ]
                            }
                          },
                          "status": "OK",
                          "code": 200,
                          "_postman_previewlanguage": "text",
                          "header": [
                            {
                              "key": "Content-Type",
                              "value": "text/plain"
                            }
                          ],
                          "cookie": [],
                          "body": ""
                        },
                        {
                          "name": "Access token is missing or invalid",
                          "originalRequest": {
                            "method": "PUT",
                            "header": [
                              {
                                "description": "Added as a part of security scheme: apikey",
                                "key": "JSESSIONID",
                                "value": "<API Key>"
                              }
                            ],
                            "url": {
                              "raw": "{{baseUrl}}/businesses/:businessId/products/:productId/images/:imageId/makeprimary",
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "path": [
                                "businesses",
                                ":businessId",
                                "products",
                                ":productId",
                                "images",
                                ":imageId",
                                "makeprimary"
                              ],
                              "variable": [
                                {
                                  "key": "businessId"
                                },
                                {
                                  "key": "productId"
                                },
                                {
                                  "key": "imageId"
                                }
                              ]
                            }
                          },
                          "status": "Unauthorized",
                          "code": 401,
                          "_postman_previewlanguage": "text",
                          "header": [
                            {
                              "key": "Content-Type",
                              "value": "text/plain"
                            }
                          ],
                          "cookie": [],
                          "body": ""
                        },
                        {
                          "name": "Forbidden: Returned when a user tries to update the primary image for a product that it is in a catalogue for a business they do not administer AND the user is not a global application admin",
                          "originalRequest": {
                            "method": "PUT",
                            "header": [
                              {
                                "description": "Added as a part of security scheme: apikey",
                                "key": "JSESSIONID",
                                "value": "<API Key>"
                              }
                            ],
                            "url": {
                              "raw": "{{baseUrl}}/businesses/:businessId/products/:productId/images/:imageId/makeprimary",
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "path": [
                                "businesses",
                                ":businessId",
                                "products",
                                ":productId",
                                "images",
                                ":imageId",
                                "makeprimary"
                              ],
                              "variable": [
                                {
                                  "key": "businessId"
                                },
                                {
                                  "key": "productId"
                                },
                                {
                                  "key": "imageId"
                                }
                              ]
                            }
                          },
                          "status": "Forbidden",
                          "code": 403,
                          "_postman_previewlanguage": "text",
                          "header": [
                            {
                              "key": "Content-Type",
                              "value": "text/plain"
                            }
                          ],
                          "cookie": [],
                          "body": ""
                        },
                        {
                          "name": "The requested route does exist (so not a 404) but some part of the request is not acceptable, for example trying to access a resource by an ID that does not exist.",
                          "originalRequest": {
                            "method": "PUT",
                            "header": [
                              {
                                "description": "Added as a part of security scheme: apikey",
                                "key": "JSESSIONID",
                                "value": "<API Key>"
                              }
                            ],
                            "url": {
                              "raw": "{{baseUrl}}/businesses/:businessId/products/:productId/images/:imageId/makeprimary",
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "path": [
                                "businesses",
                                ":businessId",
                                "products",
                                ":productId",
                                "images",
                                ":imageId",
                                "makeprimary"
                              ],
                              "variable": [
                                {
                                  "key": "businessId"
                                },
                                {
                                  "key": "productId"
                                },
                                {
                                  "key": "imageId"
                                }
                              ]
                            }
                          },
                          "status": "Not Acceptable",
                          "code": 406,
                          "_postman_previewlanguage": "text",
                          "header": [
                            {
                              "key": "Content-Type",
                              "value": "text/plain"
                            }
                          ],
                          "cookie": [],
                          "body": ""
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "Upload a new image for some photo",
                  "request": {
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "key",
                          "value": "JSESSIONID",
                          "type": "string"
                        },
                        {
                          "key": "value",
                          "value": true,
                          "type": "boolean"
                        },
                        {
                          "key": "in",
                          "value": "header",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "multipart/form-data"
                      }
                    ],
                    "body": {
                      "mode": "formdata",
                      "formdata": [
                        {
                          "key": "filename",
                          "value": "[\"cupidatat\",\"fugiat do aute\"]",
                          "type": "text"
                        }
                      ]
                    },
                    "url": {
                      "raw": "{{baseUrl}}/businesses/{{businessId}}/products/:productId/images",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "businesses",
                        "{{businessId}}",
                        "products",
                        ":productId",
                        "images"
                      ],
                      "variable": [
                        {
                          "key": "productId",
                          "value": "Duis",
                          "description": "(Required) ID (Product Code) of product to try to find in catalogue"
                        }
                      ]
                    }
                  },
                  "response": [
                    {
                      "name": "Image created successfully",
                      "originalRequest": {
                        "method": "POST",
                        "header": [
                          {
                            "description": "Added as a part of security scheme: apikey",
                            "key": "JSESSIONID",
                            "value": "<API Key>"
                          }
                        ],
                        "body": {
                          "mode": "formdata",
                          "formdata": [
                            {
                              "key": "filename",
                              "value": "[\"in\",\"nostrud ad exercitation\"]",
                              "type": "text"
                            }
                          ]
                        },
                        "url": {
                          "raw": "{{baseUrl}}/businesses/:businessId/products/:productId/images",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            "businesses",
                            ":businessId",
                            "products",
                            ":productId",
                            "images"
                          ],
                          "variable": [
                            {
                              "key": "businessId"
                            },
                            {
                              "key": "productId"
                            }
                          ]
                        }
                      },
                      "status": "Created",
                      "code": 201,
                      "_postman_previewlanguage": "json",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "cookie": [],
                      "body": "{\n \"imageId\": 1234\n}"
                    },
                    {
                      "name": "There was some error with the data supplied by the user, appropriate error message(s) should be shown to user",
                      "originalRequest": {
                        "method": "POST",
                        "header": [
                          {
                            "description": "Added as a part of security scheme: apikey",
                            "key": "JSESSIONID",
                            "value": "<API Key>"
                          }
                        ],
                        "body": {
                          "mode": "formdata",
                          "formdata": [
                            {
                              "key": "filename",
                              "value": "[\"in\",\"nostrud ad exercitation\"]",
                              "type": "text"
                            }
                          ]
                        },
                        "url": {
                          "raw": "{{baseUrl}}/businesses/:businessId/products/:productId/images",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            "businesses",
                            ":businessId",
                            "products",
                            ":productId",
                            "images"
                          ],
                          "variable": [
                            {
                              "key": "businessId"
                            },
                            {
                              "key": "productId"
                            }
                          ]
                        }
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "_postman_previewlanguage": "text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "cookie": [],
                      "body": ""
                    },
                    {
                      "name": "Access token is missing or invalid",
                      "originalRequest": {
                        "method": "POST",
                        "header": [
                          {
                            "description": "Added as a part of security scheme: apikey",
                            "key": "JSESSIONID",
                            "value": "<API Key>"
                          }
                        ],
                        "body": {
                          "mode": "formdata",
                          "formdata": [
                            {
                              "key": "filename",
                              "value": "[\"in\",\"nostrud ad exercitation\"]",
                              "type": "text"
                            }
                          ]
                        },
                        "url": {
                          "raw": "{{baseUrl}}/businesses/:businessId/products/:productId/images",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            "businesses",
                            ":businessId",
                            "products",
                            ":productId",
                            "images"
                          ],
                          "variable": [
                            {
                              "key": "businessId"
                            },
                            {
                              "key": "productId"
                            }
                          ]
                        }
                      },
                      "status": "Unauthorized",
                      "code": 401,
                      "_postman_previewlanguage": "text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "cookie": [],
                      "body": ""
                    },
                    {
                      "name": "Forbidden: Returned when a user tries to add an image for a product that it is in a catalogue for a business they do not administer AND the user is not a global application admin",
                      "originalRequest": {
                        "method": "POST",
                        "header": [
                          {
                            "description": "Added as a part of security scheme: apikey",
                            "key": "JSESSIONID",
                            "value": "<API Key>"
                          }
                        ],
                        "body": {
                          "mode": "formdata",
                          "formdata": [
                            {
                              "key": "filename",
                              "value": "[\"in\",\"nostrud ad exercitation\"]",
                              "type": "text"
                            }
                          ]
                        },
                        "url": {
                          "raw": "{{baseUrl}}/businesses/:businessId/products/:productId/images",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            "businesses",
                            ":businessId",
                            "products",
                            ":productId",
                            "images"
                          ],
                          "variable": [
                            {
                              "key": "businessId"
                            },
                            {
                              "key": "productId"
                            }
                          ]
                        }
                      },
                      "status": "Forbidden",
                      "code": 403,
                      "_postman_previewlanguage": "text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "cookie": [],
                      "body": ""
                    },
                    {
                      "name": "The requested route does exist (so not a 404) but some part of the request is not acceptable, for example trying to access a resource by an ID that does not exist.",
                      "originalRequest": {
                        "method": "POST",
                        "header": [
                          {
                            "description": "Added as a part of security scheme: apikey",
                            "key": "JSESSIONID",
                            "value": "<API Key>"
                          }
                        ],
                        "body": {
                          "mode": "formdata",
                          "formdata": [
                            {
                              "key": "filename",
                              "value": "[\"in\",\"nostrud ad exercitation\"]",
                              "type": "text"
                            }
                          ]
                        },
                        "url": {
                          "raw": "{{baseUrl}}/businesses/:businessId/products/:productId/images",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            "businesses",
                            ":businessId",
                            "products",
                            ":productId",
                            "images"
                          ],
                          "variable": [
                            {
                              "key": "businessId"
                            },
                            {
                              "key": "productId"
                            }
                          ]
                        }
                      },
                      "status": "Not Acceptable",
                      "code": 406,
                      "_postman_previewlanguage": "text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "cookie": [],
                      "body": ""
                    }
                  ]
                }
              ]
            },
            {
              "name": "Retrieve all the products in a business's catalogue",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "var index = utils.getTestIndex(pm.collectionVariables);  // getting the current index value",
                      "",
                      "// List the possible values to cycle through",
                      "sortByValues = [\"name\", \"manufacturer\", \"recommendedRetailPrice\", \"created\"];",
                      "isAscendingValues = [\"yes\", \"no\"];",
                      "pagIndexValues = [[0, \"\"], [0, 1], [2, 5]]  // In (start, end) format where `start` is pagStartIndex",
                      "",
                      "// Set the values as env vars, used as query params",
                      "sortByIndex = (Math.floor(index / 2)) % sortByValues.length;",
                      "isAscendingIndex = index % isAscendingValues.length;",
                      "pagIndexIndex = index % pagIndexValues.length;",
                      "pm.environment.set(\"sortBy\", sortByValues[sortByIndex]);",
                      "pm.environment.set(\"isAscending\", isAscendingValues[isAscendingIndex]);",
                      "pm.environment.set(\"pagStartIndex\", pagIndexValues[pagIndexIndex][0]);",
                      "pm.environment.set(\"pagEndIndex\", pagIndexValues[pagIndexIndex][1]);"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var _ = require('lodash');",
                      "",
                      "var jsonData = pm.response.json();",
                      "",
                      "// Increment the test index value, used to cycle through query params",
                      "utils.incrementTestIndex(pm.collectionVariables);",
                      "",
                      "",
                      "// Test status code",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "",
                      "// Test that totalCount is a Number and is between 0 & the amount of data returned",
                      "pm.test(\"'totalCount' returns a valid number\", function () {",
                      "    pm.expect(jsonData.totalCount).to.satisfy((count) => !isNaN(count));",
                      "    pm.expect(jsonData.totalCount).to.above(jsonData.results.length-1);",
                      "});",
                      "",
                      "",
                      "// Test the size of results match pagination indexes",
                      "pm.test(\"Pagination indices return valid results\", function () {",
                      "    pagStartIndex = pm.environment.get(\"pagStartIndex\");",
                      "    // If start index is null then simplify it to zero",
                      "    pagStartIndex = !pagStartIndex ? 0 : pagStartIndex;",
                      "    pagEndIndex = pm.environment.get(\"pagEndIndex\");",
                      "    resLength = jsonData.results.length;",
                      "    totalCount = Number(jsonData.totalCount);",
                      "",
                      "    if (!pagEndIndex || pagEndIndex >= totalCount) {",
                      "        pm.expect(resLength).to.eql(totalCount - pagStartIndex);",
                      "    } else {",
                      "        pm.expect(resLength).to.eql(pagEndIndex - pagStartIndex + 1);",
                      "    }",
                      "});",
                      "",
                      "",
                      "// Test the response schema is correct",
                      "var schema = {",
                      "    \"properties\": {",
                      "        \"results\": {",
                      "            \"type\": \"array\",",
                      "            \"items\": {",
                      "                \"type\": \"object\"",
                      "            }",
                      "        },",
                      "        \"totalCount\": {",
                      "            \"type\": \"number\"",
                      "        }",
                      "    },",
                      "    \"required\": [\"results\", \"totalCount\"]",
                      "};",
                      "",
                      "pm.test('Response body is in expected schema', function () {",
                      "    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
                      "});",
                      "",
                      "",
                      "",
                      "sortBy = pm.environment.get(\"sortBy\");",
                      "// Match the lodash format (asc/desc)",
                      "isAscending = pm.environment.get(\"isAscending\") == \"yes\" ? \"asc\" : \"desc\";",
                      "",
                      "pm.test('Product ' + sortBy + 's are in ' + isAscending + ' sorted order', () => {",
                      "   // Using the orderBy function from lodash ",
                      "   // Read docs: https://lodash.com/docs/4.17.10#orderBy",
                      "",
                      "   // I use `({ sortBy }) => sortBy || ''` so that nulls are ordered last in Ascending order to match the API",
                      "    var expectedSortedOrder = _.orderBy(jsonData.results, [( o ) => { return o[sortBy] || ''}], [isAscending]);",
                      "    console.log(expectedSortedOrder)",
                      "    console.log(jsonData.results)",
                      "",
                      "    pm.expect(jsonData.results).to.eql(expectedSortedOrder);    ",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "JSESSIONID",
                      "type": "string"
                    },
                    {
                      "key": "value",
                      "value": true,
                      "type": "boolean"
                    },
                    {
                      "key": "in",
                      "value": "header",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/businesses/{{businessId}}/products?sortBy={{sortBy}}&isAscending={{isAscending}}&pagStartIndex={{pagStartIndex}}&pagEndIndex={{pagEndIndex}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "businesses",
                    "{{businessId}}",
                    "products"
                  ],
                  "query": [
                    {
                      "key": "sortBy",
                      "value": "{{sortBy}}"
                    },
                    {
                      "key": "isAscending",
                      "value": "{{isAscending}}"
                    },
                    {
                      "key": "pagStartIndex",
                      "value": "{{pagStartIndex}}"
                    },
                    {
                      "key": "pagEndIndex",
                      "value": "{{pagEndIndex}}"
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "Catalogue retrieved successfully. This could be an empty array.",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "description": "Added as a part of security scheme: apikey",
                        "key": "JSESSIONID",
                        "value": "<API Key>"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/businesses/:id/products",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "businesses",
                        ":id",
                        "products"
                      ],
                      "variable": [
                        {
                          "key": "id"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "body": "[\n {\n  \"name\": \"Watties Baked Beans - 420g can\",\n  \"id\": \"WATT-420-BEANS\",\n  \"description\": \"Baked Beans as they should be.\",\n  \"manufacturer\": \"Heinz Wattie's Limited\",\n  \"recommendedRetailPrice\": 2.2,\n  \"created\": \"1998-12-26T14:55:47.416Z\",\n  \"images\": [\n   {\n    \"filename\": \"/media/images/23987192387509-123908794328.png\",\n    \"thumbnailFilename\": \"/media/images/23987192387509-123908794328_thumbnail.png\",\n    \"id\": 1234\n   },\n   {\n    \"filename\": \"/media/images/23987192387509-123908794328.png\",\n    \"thumbnailFilename\": \"/media/images/23987192387509-123908794328_thumbnail.png\",\n    \"id\": 1234\n   }\n  ]\n },\n {\n  \"name\": \"Watties Baked Beans - 420g can\",\n  \"id\": \"WATT-420-BEANS\",\n  \"description\": \"Baked Beans as they should be.\",\n  \"manufacturer\": \"Heinz Wattie's Limited\",\n  \"recommendedRetailPrice\": 2.2,\n  \"created\": \"1992-03-25T20:54:43.525Z\",\n  \"images\": [\n   {\n    \"filename\": \"/media/images/23987192387509-123908794328.png\",\n    \"thumbnailFilename\": \"/media/images/23987192387509-123908794328_thumbnail.png\",\n    \"id\": 1234\n   },\n   {\n    \"filename\": \"/media/images/23987192387509-123908794328.png\",\n    \"thumbnailFilename\": \"/media/images/23987192387509-123908794328_thumbnail.png\",\n    \"id\": 1234\n   }\n  ]\n }\n]"
                },
                {
                  "name": "Access token is missing or invalid",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "description": "Added as a part of security scheme: apikey",
                        "key": "JSESSIONID",
                        "value": "<API Key>"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/businesses/:id/products",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "businesses",
                        ":id",
                        "products"
                      ],
                      "variable": [
                        {
                          "key": "id"
                        }
                      ]
                    }
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "body": ""
                },
                {
                  "name": "The account performing the request is neither an administrator of the business, nor a global application admin.",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "description": "Added as a part of security scheme: apikey",
                        "key": "JSESSIONID",
                        "value": "<API Key>"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/businesses/:id/products",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "businesses",
                        ":id",
                        "products"
                      ],
                      "variable": [
                        {
                          "key": "id"
                        }
                      ]
                    }
                  },
                  "status": "Forbidden",
                  "code": 403,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "body": ""
                },
                {
                  "name": "The requested route does exist (so not a 404) but some part of the request is not acceptable, for example trying to access a resource by an ID that does not exist.",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "description": "Added as a part of security scheme: apikey",
                        "key": "JSESSIONID",
                        "value": "<API Key>"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/businesses/:id/products",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "businesses",
                        ":id",
                        "products"
                      ],
                      "variable": [
                        {
                          "key": "id"
                        }
                      ]
                    }
                  },
                  "status": "Not Acceptable",
                  "code": 406,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "body": ""
                }
              ]
            },
            {
              "name": "Add a new product to a business's catalogue",
              "request": {
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "JSESSIONID",
                      "type": "string"
                    },
                    {
                      "key": "value",
                      "value": true,
                      "type": "boolean"
                    },
                    {
                      "key": "in",
                      "value": "header",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"Watties Baked Beans - 420g can\",\n    \"id\": \"WATT-420-BEANS\",\n    \"description\": \"Baked Beans as they should be.\",\n    \"manufacturer\": \"Heinz Wattie's Limited\",\n    \"recommendedRetailPrice\": 2.2\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/businesses/{{businessId}}/products",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "businesses",
                    "{{businessId}}",
                    "products"
                  ]
                }
              },
              "response": [
                {
                  "name": "Product created successfully",
                  "originalRequest": {
                    "method": "POST",
                    "header": [
                      {
                        "description": "Added as a part of security scheme: apikey",
                        "key": "JSESSIONID",
                        "value": "<API Key>"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"name\": \"Watties Baked Beans - 420g can\",\n    \"id\": \"WATT-420-BEANS\",\n    \"description\": \"Baked Beans as they should be.\",\n    \"manufacturer\": \"Heinz Wattie's Limited\",\n    \"recommendedRetailPrice\": 2.2\n}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/businesses/:id/products",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "businesses",
                        ":id",
                        "products"
                      ],
                      "variable": [
                        {
                          "key": "id"
                        }
                      ]
                    }
                  },
                  "status": "Created",
                  "code": 201,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n \"productId\": \"WATT-420-BEANS\"\n}"
                },
                {
                  "name": "There was some error with the data supplied by the user, appropriate error message(s) should be shown to user",
                  "originalRequest": {
                    "method": "POST",
                    "header": [
                      {
                        "description": "Added as a part of security scheme: apikey",
                        "key": "JSESSIONID",
                        "value": "<API Key>"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"name\": \"Watties Baked Beans - 420g can\",\n    \"id\": \"WATT-420-BEANS\",\n    \"description\": \"Baked Beans as they should be.\",\n    \"manufacturer\": \"Heinz Wattie's Limited\",\n    \"recommendedRetailPrice\": 2.2\n}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/businesses/:id/products",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "businesses",
                        ":id",
                        "products"
                      ],
                      "variable": [
                        {
                          "key": "id"
                        }
                      ]
                    }
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "body": ""
                },
                {
                  "name": "Forbidden: Returned when a user tries to add a product to business they do not administer AND the user is not a global application admin",
                  "originalRequest": {
                    "method": "POST",
                    "header": [
                      {
                        "description": "Added as a part of security scheme: apikey",
                        "key": "JSESSIONID",
                        "value": "<API Key>"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"name\": \"Watties Baked Beans - 420g can\",\n    \"id\": \"WATT-420-BEANS\",\n    \"description\": \"Baked Beans as they should be.\",\n    \"manufacturer\": \"Heinz Wattie's Limited\",\n    \"recommendedRetailPrice\": 2.2\n}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/businesses/:id/products",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "businesses",
                        ":id",
                        "products"
                      ],
                      "variable": [
                        {
                          "key": "id"
                        }
                      ]
                    }
                  },
                  "status": "Forbidden",
                  "code": 403,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "body": ""
                }
              ]
            },
            {
              "name": "Modify an existing catalogue item",
              "request": {
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "JSESSIONID",
                      "type": "string"
                    },
                    {
                      "key": "value",
                      "value": true,
                      "type": "boolean"
                    },
                    {
                      "key": "in",
                      "value": "header",
                      "type": "string"
                    }
                  ]
                },
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"Watties Baked Beans - 420g can\",\n    \"id\": \"WATT-420-BEANS\",\n    \"description\": \"Baked Beans as they should be.\",\n    \"manufacturer\": \"Heinz Wattie's Limited\",\n    \"recommendedRetailPrice\": 2.2\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/businesses/{{businessId}}/products/:productId",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "businesses",
                    "{{businessId}}",
                    "products",
                    ":productId"
                  ],
                  "variable": [
                    {
                      "key": "productId",
                      "value": "Duis",
                      "description": "(Required) ID (Product Code) of product to try to find in catalogue"
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "Product updated successfully",
                  "originalRequest": {
                    "method": "PUT",
                    "header": [
                      {
                        "description": "Added as a part of security scheme: apikey",
                        "key": "JSESSIONID",
                        "value": "<API Key>"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"name\": \"Watties Baked Beans - 420g can\",\n    \"id\": \"WATT-420-BEANS\",\n    \"description\": \"Baked Beans as they should be.\",\n    \"manufacturer\": \"Heinz Wattie's Limited\",\n    \"recommendedRetailPrice\": 2.2\n}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/businesses/:businessId/products/:productId",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "businesses",
                        ":businessId",
                        "products",
                        ":productId"
                      ],
                      "variable": [
                        {
                          "key": "businessId"
                        },
                        {
                          "key": "productId"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "body": ""
                },
                {
                  "name": "There was some error with the data supplied by the user, appropriate error message(s) should be shown to user",
                  "originalRequest": {
                    "method": "PUT",
                    "header": [
                      {
                        "description": "Added as a part of security scheme: apikey",
                        "key": "JSESSIONID",
                        "value": "<API Key>"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"name\": \"Watties Baked Beans - 420g can\",\n    \"id\": \"WATT-420-BEANS\",\n    \"description\": \"Baked Beans as they should be.\",\n    \"manufacturer\": \"Heinz Wattie's Limited\",\n    \"recommendedRetailPrice\": 2.2\n}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/businesses/:businessId/products/:productId",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "businesses",
                        ":businessId",
                        "products",
                        ":productId"
                      ],
                      "variable": [
                        {
                          "key": "businessId"
                        },
                        {
                          "key": "productId"
                        }
                      ]
                    }
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "body": ""
                },
                {
                  "name": "Forbidden: Returned when a user tries to update a product for a business they do not administer AND the user is not a global application admin",
                  "originalRequest": {
                    "method": "PUT",
                    "header": [
                      {
                        "description": "Added as a part of security scheme: apikey",
                        "key": "JSESSIONID",
                        "value": "<API Key>"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"name\": \"Watties Baked Beans - 420g can\",\n    \"id\": \"WATT-420-BEANS\",\n    \"description\": \"Baked Beans as they should be.\",\n    \"manufacturer\": \"Heinz Wattie's Limited\",\n    \"recommendedRetailPrice\": 2.2\n}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/businesses/:businessId/products/:productId",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "businesses",
                        ":businessId",
                        "products",
                        ":productId"
                      ],
                      "variable": [
                        {
                          "key": "businessId"
                        },
                        {
                          "key": "productId"
                        }
                      ]
                    }
                  },
                  "status": "Forbidden",
                  "code": 403,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "body": ""
                }
              ]
            }
          ]
        },
        {
          "name": "inventory",
          "item": [
            {
              "name": "Retrieve a business's product inventory",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "var index = utils.getTestIndex(pm.collectionVariables);  // getting the current index value",
                      "",
                      "// List the possible values to cycle through",
                      "sortByValues = [\"quantity\", \"pricePerItem\", \"totalPrice\", \"manufactured\", \"sellBy\", \"bestBefore\"];",
                      "isAscendingValues = [\"yes\", \"no\"];",
                      "pagIndexValues = [[0, \"\"], [0, 1], [2, 5]]  // In (start, end) format where `start` is pagStartIndex",
                      "",
                      "// Set the values as env vars, used as query params",
                      "sortByIndex = (Math.floor(index / 2)) % sortByValues.length;",
                      "isAscendingIndex = index % isAscendingValues.length;",
                      "pagIndexIndex = index % pagIndexValues.length;",
                      "pm.environment.set(\"sortBy\", sortByValues[sortByIndex]);",
                      "pm.environment.set(\"isAscending\", isAscendingValues[isAscendingIndex]);",
                      "pm.environment.set(\"pagStartIndex\", pagIndexValues[pagIndexIndex][0]);",
                      "pm.environment.set(\"pagEndIndex\", pagIndexValues[pagIndexIndex][1]);"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var _ = require('lodash');",
                      "",
                      "var jsonData = pm.response.json();",
                      "",
                      "",
                      "// Test status code",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "",
                      "// Test that totalCount is a Number and is between 0 & the amount of data returned",
                      "pm.test(\"'totalCount' returns a valid number\", function () {",
                      "    pm.expect(jsonData.totalCount).to.satisfy((count) => !isNaN(count));",
                      "    pm.expect(jsonData.totalCount).to.above(jsonData.results.length-1);",
                      "});",
                      "",
                      "",
                      "// Test the size of results match pagination indexes",
                      "pm.test(\"Pagination indices return valid results\", function () {",
                      "    pagStartIndex = pm.environment.get(\"pagStartIndex\");",
                      "    // If start index is null then simplify it to zero",
                      "    pagStartIndex = !pagStartIndex ? 0 : pagStartIndex;",
                      "    pagEndIndex = pm.environment.get(\"pagEndIndex\");",
                      "    resLength = jsonData.results.length;",
                      "    totalCount = Number(jsonData.totalCount);",
                      "",
                      "    if (!pagEndIndex || pagEndIndex >= totalCount) {",
                      "        pm.expect(resLength).to.eql(totalCount - pagStartIndex);",
                      "    } else {",
                      "        pm.expect(resLength).to.eql(pagEndIndex - pagStartIndex + 1);",
                      "    }",
                      "});",
                      "",
                      "",
                      "// Test the response schema is correct",
                      "var schema = {",
                      "    \"properties\": {",
                      "        \"results\": {",
                      "            \"type\": \"array\",",
                      "            \"items\": {",
                      "                \"type\": \"object\"",
                      "            }",
                      "        },",
                      "        \"totalCount\": {",
                      "            \"type\": \"number\"",
                      "        }",
                      "    },",
                      "    \"required\": [\"results\", \"totalCount\"]",
                      "};",
                      "",
                      "pm.test('Response body is in expected schema', function () {",
                      "    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
                      "});",
                      "",
                      "",
                      "",
                      "// Increment the test index value, used to cycle through query params",
                      "utils.incrementTestIndex(pm.collectionVariables);",
                      "",
                      "sortBy = pm.environment.get(\"sortBy\");",
                      "// Match the lodash format (asc/desc)",
                      "isAscending = pm.environment.get(\"isAscending\") == \"yes\" ? \"asc\" : \"desc\";",
                      "",
                      "pm.test('Inventory ' + sortBy + 's are in ' + isAscending + ' sorted order', () => {",
                      "   // Using the orderBy function from lodash ",
                      "   // Read docs: https://lodash.com/docs/4.17.10#orderBy",
                      "",
                      "   // I use `({ sortBy }) => sortBy || ''` so that nulls are ordered last in Ascending order to match the API",
                      "    var expectedSortedOrder = _.orderBy(jsonData.results, [( o ) => { return o[sortBy] || ''}],[isAscending]);",
                      "",
                      "    pm.expect(jsonData.results).to.eql(expectedSortedOrder);    ",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "JSESSIONID",
                      "type": "string"
                    },
                    {
                      "key": "value",
                      "value": true,
                      "type": "boolean"
                    },
                    {
                      "key": "in",
                      "value": "header",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/businesses/{{businessId}}/inventory/?sortBy={{sortBy}}&isAscending={{isAscending}}&pagStartIndex={{pagStartIndex}}&pagEndIndex={{pagEndIndex}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "businesses",
                    "{{businessId}}",
                    "inventory",
                    ""
                  ],
                  "query": [
                    {
                      "key": "sortBy",
                      "value": "{{sortBy}}"
                    },
                    {
                      "key": "isAscending",
                      "value": "{{isAscending}}"
                    },
                    {
                      "key": "pagStartIndex",
                      "value": "{{pagStartIndex}}"
                    },
                    {
                      "key": "pagEndIndex",
                      "value": "{{pagEndIndex}}"
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "Inventory retrieved successfully. This could be an empty array.",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "description": "Added as a part of security scheme: apikey",
                        "key": "JSESSIONID",
                        "value": "<API Key>"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/businesses/:id/inventory/",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "businesses",
                        ":id",
                        "inventory",
                        ""
                      ],
                      "variable": [
                        {
                          "key": "id"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "body": "[\n {\n  \"quantity\": 4,\n  \"expires\": \"1985-03-15\",\n  \"id\": 101,\n  \"product\": {\n   \"name\": \"Watties Baked Beans - 420g can\",\n   \"id\": \"WATT-420-BEANS\",\n   \"description\": \"Baked Beans as they should be.\",\n   \"manufacturer\": \"Heinz Wattie's Limited\",\n   \"recommendedRetailPrice\": 2.2,\n   \"created\": \"2003-11-17T18:28:55.512Z\",\n   \"images\": [\n    {\n     \"filename\": \"/media/images/23987192387509-123908794328.png\",\n     \"thumbnailFilename\": \"/media/images/23987192387509-123908794328_thumbnail.png\",\n     \"id\": 1234\n    },\n    {\n     \"filename\": \"/media/images/23987192387509-123908794328.png\",\n     \"thumbnailFilename\": \"/media/images/23987192387509-123908794328_thumbnail.png\",\n     \"id\": 1234\n    }\n   ]\n  },\n  \"pricePerItem\": 6.5,\n  \"totalPrice\": 21.99,\n  \"manufactured\": \"2005-12-10\",\n  \"sellBy\": \"2000-12-05\",\n  \"bestBefore\": \"1951-12-05\"\n },\n {\n  \"quantity\": 4,\n  \"expires\": \"1971-04-06\",\n  \"id\": 101,\n  \"product\": {\n   \"name\": \"Watties Baked Beans - 420g can\",\n   \"id\": \"WATT-420-BEANS\",\n   \"description\": \"Baked Beans as they should be.\",\n   \"manufacturer\": \"Heinz Wattie's Limited\",\n   \"recommendedRetailPrice\": 2.2,\n   \"created\": \"1944-12-04T15:42:43.894Z\",\n   \"images\": [\n    {\n     \"filename\": \"/media/images/23987192387509-123908794328.png\",\n     \"thumbnailFilename\": \"/media/images/23987192387509-123908794328_thumbnail.png\",\n     \"id\": 1234\n    },\n    {\n     \"filename\": \"/media/images/23987192387509-123908794328.png\",\n     \"thumbnailFilename\": \"/media/images/23987192387509-123908794328_thumbnail.png\",\n     \"id\": 1234\n    }\n   ]\n  },\n  \"pricePerItem\": 6.5,\n  \"totalPrice\": 21.99,\n  \"manufactured\": \"2004-08-07\",\n  \"sellBy\": \"1954-10-12\",\n  \"bestBefore\": \"1946-03-26\"\n }\n]"
                },
                {
                  "name": "Access token is missing or invalid",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "description": "Added as a part of security scheme: apikey",
                        "key": "JSESSIONID",
                        "value": "<API Key>"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/businesses/:id/inventory/",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "businesses",
                        ":id",
                        "inventory",
                        ""
                      ],
                      "variable": [
                        {
                          "key": "id"
                        }
                      ]
                    }
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "body": ""
                },
                {
                  "name": "The account performing the request is neither an administrator of the business, nor a global application admin.",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "description": "Added as a part of security scheme: apikey",
                        "key": "JSESSIONID",
                        "value": "<API Key>"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/businesses/:id/inventory/",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "businesses",
                        ":id",
                        "inventory",
                        ""
                      ],
                      "variable": [
                        {
                          "key": "id"
                        }
                      ]
                    }
                  },
                  "status": "Forbidden",
                  "code": 403,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "body": ""
                },
                {
                  "name": "The requested route does exist (so not a 404) but some part of the request is not acceptable, for example trying to access a resource by an ID that does not exist.",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "description": "Added as a part of security scheme: apikey",
                        "key": "JSESSIONID",
                        "value": "<API Key>"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/businesses/:id/inventory/",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "businesses",
                        ":id",
                        "inventory",
                        ""
                      ],
                      "variable": [
                        {
                          "key": "id"
                        }
                      ]
                    }
                  },
                  "status": "Not Acceptable",
                  "code": 406,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "body": ""
                }
              ]
            },
            {
              "name": "Add a new inventory item to a business's inventory",
              "request": {
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "JSESSIONID",
                      "type": "string"
                    },
                    {
                      "key": "value",
                      "value": true,
                      "type": "boolean"
                    },
                    {
                      "key": "in",
                      "value": "header",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"productId\": \"WATT-420-BEANS\",\n    \"quantity\": 4,\n    \"expires\": \"1949-03-05\",\n    \"pricePerItem\": 6.5,\n    \"totalPrice\": 21.99,\n    \"manufactured\": \"1958-03-12\",\n    \"sellBy\": \"1946-10-23\",\n    \"bestBefore\": \"1969-03-05\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/businesses/{{businessId}}/inventory/",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "businesses",
                    "{{businessId}}",
                    "inventory",
                    ""
                  ]
                }
              },
              "response": [
                {
                  "name": "Inventory item created successfully",
                  "originalRequest": {
                    "method": "POST",
                    "header": [
                      {
                        "description": "Added as a part of security scheme: apikey",
                        "key": "JSESSIONID",
                        "value": "<API Key>"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"productId\": \"WATT-420-BEANS\",\n    \"quantity\": 4,\n    \"expires\": \"1949-03-05\",\n    \"pricePerItem\": 6.5,\n    \"totalPrice\": 21.99,\n    \"manufactured\": \"1958-03-12\",\n    \"sellBy\": \"1946-10-23\",\n    \"bestBefore\": \"1969-03-05\"\n}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/businesses/:id/inventory/",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "businesses",
                        ":id",
                        "inventory",
                        ""
                      ],
                      "variable": [
                        {
                          "key": "id"
                        }
                      ]
                    }
                  },
                  "status": "Created",
                  "code": 201,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n \"inventoryItemId\": 101\n}"
                },
                {
                  "name": "There was some error with the data supplied by the user, appropriate error message(s) should be shown to user",
                  "originalRequest": {
                    "method": "POST",
                    "header": [
                      {
                        "description": "Added as a part of security scheme: apikey",
                        "key": "JSESSIONID",
                        "value": "<API Key>"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"productId\": \"WATT-420-BEANS\",\n    \"quantity\": 4,\n    \"expires\": \"1949-03-05\",\n    \"pricePerItem\": 6.5,\n    \"totalPrice\": 21.99,\n    \"manufactured\": \"1958-03-12\",\n    \"sellBy\": \"1946-10-23\",\n    \"bestBefore\": \"1969-03-05\"\n}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/businesses/:id/inventory/",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "businesses",
                        ":id",
                        "inventory",
                        ""
                      ],
                      "variable": [
                        {
                          "key": "id"
                        }
                      ]
                    }
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "body": ""
                },
                {
                  "name": "Forbidden: Returned when a user tries to add an inventory item to the inventory of a business they do not administer AND the user is not a global application admin",
                  "originalRequest": {
                    "method": "POST",
                    "header": [
                      {
                        "description": "Added as a part of security scheme: apikey",
                        "key": "JSESSIONID",
                        "value": "<API Key>"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"productId\": \"WATT-420-BEANS\",\n    \"quantity\": 4,\n    \"expires\": \"1949-03-05\",\n    \"pricePerItem\": 6.5,\n    \"totalPrice\": 21.99,\n    \"manufactured\": \"1958-03-12\",\n    \"sellBy\": \"1946-10-23\",\n    \"bestBefore\": \"1969-03-05\"\n}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/businesses/:id/inventory/",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "businesses",
                        ":id",
                        "inventory",
                        ""
                      ],
                      "variable": [
                        {
                          "key": "id"
                        }
                      ]
                    }
                  },
                  "status": "Forbidden",
                  "code": 403,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "body": ""
                }
              ]
            },
            {
              "name": "Modify an existing inventory item",
              "request": {
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "JSESSIONID",
                      "type": "string"
                    },
                    {
                      "key": "value",
                      "value": true,
                      "type": "boolean"
                    },
                    {
                      "key": "in",
                      "value": "header",
                      "type": "string"
                    }
                  ]
                },
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"productId\": \"WATT-420-BEANS\",\n    \"quantity\": 4,\n    \"expires\": \"1949-03-05\",\n    \"pricePerItem\": 6.5,\n    \"totalPrice\": 21.99,\n    \"manufactured\": \"1958-03-12\",\n    \"sellBy\": \"1946-10-23\",\n    \"bestBefore\": \"1969-03-05\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/businesses/{{businessId}}/inventory/:inventoryItemId",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "businesses",
                    "{{businessId}}",
                    "inventory",
                    ":inventoryItemId"
                  ],
                  "variable": [
                    {
                      "key": "inventoryItemId",
                      "value": "Duis",
                      "description": "(Required) ID of inventory item to update"
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "Inventory item updated successfully",
                  "originalRequest": {
                    "method": "PUT",
                    "header": [
                      {
                        "description": "Added as a part of security scheme: apikey",
                        "key": "JSESSIONID",
                        "value": "<API Key>"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"productId\": \"WATT-420-BEANS\",\n    \"quantity\": 4,\n    \"expires\": \"1949-03-05\",\n    \"pricePerItem\": 6.5,\n    \"totalPrice\": 21.99,\n    \"manufactured\": \"1958-03-12\",\n    \"sellBy\": \"1946-10-23\",\n    \"bestBefore\": \"1969-03-05\"\n}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/businesses/:businessId/inventory/:inventoryItemId",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "businesses",
                        ":businessId",
                        "inventory",
                        ":inventoryItemId"
                      ],
                      "variable": [
                        {
                          "key": "businessId"
                        },
                        {
                          "key": "inventoryItemId"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "body": ""
                },
                {
                  "name": "There was some error with the data supplied by the user, appropriate error message(s) should be shown to user",
                  "originalRequest": {
                    "method": "PUT",
                    "header": [
                      {
                        "description": "Added as a part of security scheme: apikey",
                        "key": "JSESSIONID",
                        "value": "<API Key>"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"productId\": \"WATT-420-BEANS\",\n    \"quantity\": 4,\n    \"expires\": \"1949-03-05\",\n    \"pricePerItem\": 6.5,\n    \"totalPrice\": 21.99,\n    \"manufactured\": \"1958-03-12\",\n    \"sellBy\": \"1946-10-23\",\n    \"bestBefore\": \"1969-03-05\"\n}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/businesses/:businessId/inventory/:inventoryItemId",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "businesses",
                        ":businessId",
                        "inventory",
                        ":inventoryItemId"
                      ],
                      "variable": [
                        {
                          "key": "businessId"
                        },
                        {
                          "key": "inventoryItemId"
                        }
                      ]
                    }
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "body": ""
                },
                {
                  "name": "Forbidden: Returned when a user tries to update an inventory item for a business they do not administer AND the user is not a global application admin",
                  "originalRequest": {
                    "method": "PUT",
                    "header": [
                      {
                        "description": "Added as a part of security scheme: apikey",
                        "key": "JSESSIONID",
                        "value": "<API Key>"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"productId\": \"WATT-420-BEANS\",\n    \"quantity\": 4,\n    \"expires\": \"1949-03-05\",\n    \"pricePerItem\": 6.5,\n    \"totalPrice\": 21.99,\n    \"manufactured\": \"1958-03-12\",\n    \"sellBy\": \"1946-10-23\",\n    \"bestBefore\": \"1969-03-05\"\n}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/businesses/:businessId/inventory/:inventoryItemId",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "businesses",
                        ":businessId",
                        "inventory",
                        ":inventoryItemId"
                      ],
                      "variable": [
                        {
                          "key": "businessId"
                        },
                        {
                          "key": "inventoryItemId"
                        }
                      ]
                    }
                  },
                  "status": "Forbidden",
                  "code": 403,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "body": ""
                }
              ]
            }
          ]
        },
        {
          "name": "listings",
          "item": [
            {
              "name": "Retrieve a business's listings",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "var index = utils.getTestIndex(pm.collectionVariables);  // getting the current index value",
                      "",
                      "// List the possible values to cycle through",
                      "sortByValues = [\"quantity\", \"price\", \"created\", \"closes\"];",
                      "isAscendingValues = [\"yes\", \"no\"];",
                      "pagIndexValues = [[0, \"\"], [0, 1], [2, 5]]  // In (start, end) format where `start` is pagStartIndex",
                      "",
                      "// Set the values as env vars, used as query params",
                      "sortByIndex = (Math.floor(index / 2)) % sortByValues.length;",
                      "isAscendingIndex = index % isAscendingValues.length;",
                      "pagIndexIndex = index % pagIndexValues.length;",
                      "pm.environment.set(\"sortBy\", sortByValues[sortByIndex]);",
                      "pm.environment.set(\"isAscending\", isAscendingValues[isAscendingIndex]);",
                      "pm.environment.set(\"pagStartIndex\", pagIndexValues[pagIndexIndex][0]);",
                      "pm.environment.set(\"pagEndIndex\", pagIndexValues[pagIndexIndex][1]);"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var _ = require('lodash');",
                      "",
                      "var jsonData = pm.response.json();",
                      "",
                      "",
                      "// Test status code",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "",
                      "// Test that totalCount is a Number and is between 0 & the amount of data returned",
                      "pm.test(\"'totalCount' returns a valid number\", function () {",
                      "    pm.expect(jsonData.totalCount).to.satisfy((count) => !isNaN(count));",
                      "    pm.expect(jsonData.totalCount).to.above(jsonData.results.length-1);",
                      "});",
                      "",
                      "",
                      "// Test the size of results match pagination indexes",
                      "pm.test(\"Pagination indices return valid results\", function () {",
                      "    pagStartIndex = pm.environment.get(\"pagStartIndex\");",
                      "    // If start index is null then simplify it to zero",
                      "    pagStartIndex = !pagStartIndex ? 0 : pagStartIndex;",
                      "    pagEndIndex = pm.environment.get(\"pagEndIndex\");",
                      "    resLength = jsonData.results.length;",
                      "    totalCount = Number(jsonData.totalCount);",
                      "",
                      "    if (!pagEndIndex || pagEndIndex >= totalCount) {",
                      "        pm.expect(resLength).to.eql(totalCount - pagStartIndex);",
                      "    } else {",
                      "        pm.expect(resLength).to.eql(pagEndIndex - pagStartIndex + 1);",
                      "    }",
                      "});",
                      "",
                      "",
                      "// Test the response schema is correct",
                      "var schema = {",
                      "    \"properties\": {",
                      "        \"results\": {",
                      "            \"type\": \"array\",",
                      "            \"items\": {",
                      "                \"type\": \"object\"",
                      "            }",
                      "        },",
                      "        \"totalCount\": {",
                      "            \"type\": \"number\"",
                      "        }",
                      "    },",
                      "    \"required\": [\"results\", \"totalCount\"]",
                      "};",
                      "",
                      "pm.test('Response body is in expected schema', function () {",
                      "    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
                      "});",
                      "",
                      "",
                      "",
                      "// Increment the test index value, used to cycle through query params",
                      "utils.incrementTestIndex(pm.collectionVariables);",
                      "",
                      "sortBy = pm.environment.get(\"sortBy\");",
                      "// Match the lodash format (asc/desc)",
                      "isAscending = pm.environment.get(\"isAscending\") == \"yes\" ? \"asc\" : \"desc\";",
                      "",
                      "pm.test('Listing ' + sortBy + 's are in ' + isAscending + ' sorted order', () => {",
                      "   // Using the orderBy function from lodash ",
                      "   // Read docs: https://lodash.com/docs/4.17.10#orderBy",
                      "",
                      "   // I use `({ sortBy }) => sortBy || ''` so that nulls are ordered last in Ascending order to match the API",
                      "    var expectedSortedOrder = _.orderBy(jsonData.results, [( o ) => { return o[sortBy] || ''}],[isAscending]);",
                      "",
                      "    pm.expect(jsonData.results).to.eql(expectedSortedOrder);    ",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "JSESSIONID",
                      "type": "string"
                    },
                    {
                      "key": "value",
                      "value": true,
                      "type": "boolean"
                    },
                    {
                      "key": "in",
                      "value": "header",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/businesses/{{businessId}}/listings?sortBy={{sortBy}}&isAscending={{isAscending}}&pagStartIndex={{pagStartIndex}}&pagEndIndex={{pagEndIndex}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "businesses",
                    "{{businessId}}",
                    "listings"
                  ],
                  "query": [
                    {
                      "key": "sortBy",
                      "value": "{{sortBy}}"
                    },
                    {
                      "key": "isAscending",
                      "value": "{{isAscending}}"
                    },
                    {
                      "key": "pagStartIndex",
                      "value": "{{pagStartIndex}}"
                    },
                    {
                      "key": "pagEndIndex",
                      "value": "{{pagEndIndex}}"
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "Listings retrieved successfully. This could be an empty array.",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "description": "Added as a part of security scheme: apikey",
                        "key": "JSESSIONID",
                        "value": "<API Key>"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/businesses/:id/listings",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "businesses",
                        ":id",
                        "listings"
                      ],
                      "variable": [
                        {
                          "key": "id"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "body": "[\n {\n  \"quantity\": 3,\n  \"price\": 17.99,\n  \"id\": 57,\n  \"inventoryItem\": {\n   \"quantity\": 4,\n   \"expires\": \"1945-01-21\",\n   \"id\": 101,\n   \"product\": {\n    \"name\": \"Watties Baked Beans - 420g can\",\n    \"id\": \"WATT-420-BEANS\",\n    \"description\": \"Baked Beans as they should be.\",\n    \"manufacturer\": \"Heinz Wattie's Limited\",\n    \"recommendedRetailPrice\": 2.2,\n    \"created\": \"2020-09-07T21:10:56.323Z\",\n    \"images\": [\n     {\n      \"filename\": \"/media/images/23987192387509-123908794328.png\",\n      \"thumbnailFilename\": \"/media/images/23987192387509-123908794328_thumbnail.png\",\n      \"id\": 1234\n     },\n     {\n      \"filename\": \"/media/images/23987192387509-123908794328.png\",\n      \"thumbnailFilename\": \"/media/images/23987192387509-123908794328_thumbnail.png\",\n      \"id\": 1234\n     }\n    ]\n   },\n   \"pricePerItem\": 6.5,\n   \"totalPrice\": 21.99,\n   \"manufactured\": \"1948-10-19\",\n   \"sellBy\": \"1945-11-05\",\n   \"bestBefore\": \"1968-06-02\"\n  },\n  \"moreInfo\": \"Seller may be willing to consider near offers\",\n  \"created\": \"2021-07-14T11:44:00Z\",\n  \"closes\": \"2021-07-21T23:59:00Z\"\n },\n {\n  \"quantity\": 3,\n  \"price\": 17.99,\n  \"id\": 57,\n  \"inventoryItem\": {\n   \"quantity\": 4,\n   \"expires\": \"1944-11-20\",\n   \"id\": 101,\n   \"product\": {\n    \"name\": \"Watties Baked Beans - 420g can\",\n    \"id\": \"WATT-420-BEANS\",\n    \"description\": \"Baked Beans as they should be.\",\n    \"manufacturer\": \"Heinz Wattie's Limited\",\n    \"recommendedRetailPrice\": 2.2,\n    \"created\": \"1952-03-12T14:19:29.433Z\",\n    \"images\": [\n     {\n      \"filename\": \"/media/images/23987192387509-123908794328.png\",\n      \"thumbnailFilename\": \"/media/images/23987192387509-123908794328_thumbnail.png\",\n      \"id\": 1234\n     },\n     {\n      \"filename\": \"/media/images/23987192387509-123908794328.png\",\n      \"thumbnailFilename\": \"/media/images/23987192387509-123908794328_thumbnail.png\",\n      \"id\": 1234\n     }\n    ]\n   },\n   \"pricePerItem\": 6.5,\n   \"totalPrice\": 21.99,\n   \"manufactured\": \"1959-11-04\",\n   \"sellBy\": \"1983-02-15\",\n   \"bestBefore\": \"1976-12-20\"\n  },\n  \"moreInfo\": \"Seller may be willing to consider near offers\",\n  \"created\": \"2021-07-14T11:44:00Z\",\n  \"closes\": \"2021-07-21T23:59:00Z\"\n }\n]"
                },
                {
                  "name": "Access token is missing or invalid",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "description": "Added as a part of security scheme: apikey",
                        "key": "JSESSIONID",
                        "value": "<API Key>"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/businesses/:id/listings",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "businesses",
                        ":id",
                        "listings"
                      ],
                      "variable": [
                        {
                          "key": "id"
                        }
                      ]
                    }
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "body": ""
                },
                {
                  "name": "The requested route does exist (so not a 404) but some part of the request is not acceptable, for example trying to access a resource by an ID that does not exist.",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "description": "Added as a part of security scheme: apikey",
                        "key": "JSESSIONID",
                        "value": "<API Key>"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/businesses/:id/listings",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "businesses",
                        ":id",
                        "listings"
                      ],
                      "variable": [
                        {
                          "key": "id"
                        }
                      ]
                    }
                  },
                  "status": "Not Acceptable",
                  "code": 406,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "body": ""
                }
              ]
            },
            {
              "name": "Add a new listing for some inventory item of a business",
              "request": {
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "JSESSIONID",
                      "type": "string"
                    },
                    {
                      "key": "value",
                      "value": true,
                      "type": "boolean"
                    },
                    {
                      "key": "in",
                      "value": "header",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"inventoryItemId\": 101,\n    \"quantity\": 3,\n    \"price\": 17.99,\n    \"moreInfo\": \"Seller may be willing to consider near offers\",\n    \"closes\": \"2021-07-21T23:59:00Z\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/businesses/{{businessId}}/listings",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "businesses",
                    "{{businessId}}",
                    "listings"
                  ]
                }
              },
              "response": [
                {
                  "name": "Listing created successfully",
                  "originalRequest": {
                    "method": "POST",
                    "header": [
                      {
                        "description": "Added as a part of security scheme: apikey",
                        "key": "JSESSIONID",
                        "value": "<API Key>"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"inventoryItemId\": 101,\n    \"quantity\": 3,\n    \"price\": 17.99,\n    \"moreInfo\": \"Seller may be willing to consider near offers\",\n    \"closes\": \"2021-07-21T23:59:00Z\"\n}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/businesses/:id/listings",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "businesses",
                        ":id",
                        "listings"
                      ],
                      "variable": [
                        {
                          "key": "id"
                        }
                      ]
                    }
                  },
                  "status": "Created",
                  "code": 201,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n \"listingId\": 57\n}"
                },
                {
                  "name": "There was some error with the data supplied by the user, appropriate error message(s) should be shown to user",
                  "originalRequest": {
                    "method": "POST",
                    "header": [
                      {
                        "description": "Added as a part of security scheme: apikey",
                        "key": "JSESSIONID",
                        "value": "<API Key>"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"inventoryItemId\": 101,\n    \"quantity\": 3,\n    \"price\": 17.99,\n    \"moreInfo\": \"Seller may be willing to consider near offers\",\n    \"closes\": \"2021-07-21T23:59:00Z\"\n}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/businesses/:id/listings",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "businesses",
                        ":id",
                        "listings"
                      ],
                      "variable": [
                        {
                          "key": "id"
                        }
                      ]
                    }
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "body": ""
                },
                {
                  "name": "Forbidden: Returned when a user tries to add listing for a business they do not administer AND the user is not a global application admin",
                  "originalRequest": {
                    "method": "POST",
                    "header": [
                      {
                        "description": "Added as a part of security scheme: apikey",
                        "key": "JSESSIONID",
                        "value": "<API Key>"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"inventoryItemId\": 101,\n    \"quantity\": 3,\n    \"price\": 17.99,\n    \"moreInfo\": \"Seller may be willing to consider near offers\",\n    \"closes\": \"2021-07-21T23:59:00Z\"\n}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/businesses/:id/listings",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "businesses",
                        ":id",
                        "listings"
                      ],
                      "variable": [
                        {
                          "key": "id"
                        }
                      ]
                    }
                  },
                  "status": "Forbidden",
                  "code": 403,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "body": ""
                }
              ]
            },
            {
              "name": "Purchase Listing",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Your test name\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.transactionId).to.be.a(\"number\");",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/businesses/1001/listings/5003/purchase",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "businesses",
                    "1001",
                    "listings",
                    "5003",
                    "purchase"
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Create a new business entity",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"businessId\", jsonData.businessId);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "JSESSIONID",
                  "type": "string"
                },
                {
                  "key": "value",
                  "value": true,
                  "type": "boolean"
                },
                {
                  "key": "in",
                  "value": "header",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"Lumbridge General Store\",\n    \"address\": {\n        \"country\": \"New Zealand\",\n        \"streetNumber\": \"3/24\",\n        \"streetName\": \"Ilam Road\",\n        \"suburb\": \"Upper Riccarton\",\n        \"city\": \"Christchurch\",\n        \"region\": \"Canterbury\",\n        \"postcode\": \"90210\"\n    },\n    \"businessType\": \"Non-profit organisation\",\n    \"primaryAdministratorId\": 20,\n    \"description\": \"A one-stop shop for all your adventuring needs\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/businesses",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "businesses"
              ]
            }
          },
          "response": [
            {
              "name": "Business account created successfully",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "description": "Added as a part of security scheme: apikey",
                    "key": "JSESSIONID",
                    "value": "<API Key>"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"Lumbridge General Store\",\n    \"address\": {\n        \"country\": \"New Zealand\",\n        \"streetNumber\": \"3/24\",\n        \"streetName\": \"Ilam Road\",\n        \"suburb\": \"Upper Riccarton\",\n        \"city\": \"Christchurch\",\n        \"region\": \"Canterbury\",\n        \"postcode\": \"90210\"\n    },\n    \"businessType\": \"Non-profit organisation\",\n    \"primaryAdministratorId\": 20,\n    \"description\": \"A one-stop shop for all your adventuring needs\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/businesses",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "businesses"
                  ]
                }
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n \"businessId\": 100\n}"
            },
            {
              "name": "Access token is missing or invalid",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "description": "Added as a part of security scheme: apikey",
                    "key": "JSESSIONID",
                    "value": "<API Key>"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"Lumbridge General Store\",\n    \"address\": {\n        \"country\": \"New Zealand\",\n        \"streetNumber\": \"3/24\",\n        \"streetName\": \"Ilam Road\",\n        \"suburb\": \"Upper Riccarton\",\n        \"city\": \"Christchurch\",\n        \"region\": \"Canterbury\",\n        \"postcode\": \"90210\"\n    },\n    \"businessType\": \"Non-profit organisation\",\n    \"primaryAdministratorId\": 20,\n    \"description\": \"A one-stop shop for all your adventuring needs\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/businesses",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "businesses"
                  ]
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Retrieve a specific business account",
          "request": {
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "JSESSIONID",
                  "type": "string"
                },
                {
                  "key": "value",
                  "value": true,
                  "type": "boolean"
                },
                {
                  "key": "in",
                  "value": "header",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/businesses/{{businessId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "businesses",
                "{{businessId}}"
              ]
            }
          },
          "response": [
            {
              "name": "Business retrieved successfully",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "description": "Added as a part of security scheme: apikey",
                    "key": "JSESSIONID",
                    "value": "<API Key>"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/businesses/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "businesses",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n \"name\": \"Lumbridge General Store\",\n \"address\": {\n  \"country\": \"New Zealand\",\n  \"streetNumber\": \"3/24\",\n  \"streetName\": \"Ilam Road\",\n  \"suburb\": \"Upper Riccarton\",\n  \"city\": \"Christchurch\",\n  \"region\": \"Canterbury\",\n  \"postcode\": \"90210\"\n },\n \"businessType\": \"Charitable organisation\",\n \"id\": 100,\n \"administrators\": [\n  {\n   \"firstName\": \"John\",\n   \"lastName\": \"Smith\",\n   \"email\": \"johnsmith99@gmail.com\",\n   \"dateOfBirth\": \"1999-04-27\",\n   \"homeAddress\": {\n    \"country\": \"New Zealand\",\n    \"streetNumber\": \"3/24\",\n    \"streetName\": \"Ilam Road\",\n    \"suburb\": \"Upper Riccarton\",\n    \"city\": \"Christchurch\",\n    \"region\": \"Canterbury\",\n    \"postcode\": \"90210\"\n   },\n   \"id\": 100,\n   \"middleName\": \"Hector\",\n   \"nickname\": \"Jonny\",\n   \"bio\": \"Likes long walks on the beach\",\n   \"phoneNumber\": \"+64 3 555 0129\",\n   \"created\": \"2020-07-14T14:32:00Z\",\n   \"role\": \"defaultGlobalApplicationAdmin\",\n   \"businessesAdministered\": [\n    {\n     \"value\": \"<Circular reference to #/components/schemas/Business detected>\"\n    },\n    {\n     \"value\": \"<Circular reference to #/components/schemas/Business detected>\"\n    }\n   ]\n  },\n  {\n   \"firstName\": \"John\",\n   \"lastName\": \"Smith\",\n   \"email\": \"johnsmith99@gmail.com\",\n   \"dateOfBirth\": \"1999-04-27\",\n   \"homeAddress\": {\n    \"country\": \"New Zealand\",\n    \"streetNumber\": \"3/24\",\n    \"streetName\": \"Ilam Road\",\n    \"suburb\": \"Upper Riccarton\",\n    \"city\": \"Christchurch\",\n    \"region\": \"Canterbury\",\n    \"postcode\": \"90210\"\n   },\n   \"id\": 100,\n   \"middleName\": \"Hector\",\n   \"nickname\": \"Jonny\",\n   \"bio\": \"Likes long walks on the beach\",\n   \"phoneNumber\": \"+64 3 555 0129\",\n   \"created\": \"2020-07-14T14:32:00Z\",\n   \"role\": \"globalApplicationAdmin\",\n   \"businessesAdministered\": [\n    {\n     \"value\": \"<Circular reference to #/components/schemas/Business detected>\"\n    },\n    {\n     \"value\": \"<Circular reference to #/components/schemas/Business detected>\"\n    }\n   ]\n  }\n ],\n \"primaryAdministratorId\": 20,\n \"description\": \"A one-stop shop for all your adventuring needs\",\n \"created\": \"2020-07-14T14:52:00Z\"\n}"
            },
            {
              "name": "Access token is missing or invalid",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "description": "Added as a part of security scheme: apikey",
                    "key": "JSESSIONID",
                    "value": "<API Key>"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/businesses/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "businesses",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id"
                    }
                  ]
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "The requested route does exist (so not a 404) but some part of the request is not acceptable, for example trying to access a resource by an ID that does not exist.",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "description": "Added as a part of security scheme: apikey",
                    "key": "JSESSIONID",
                    "value": "<API Key>"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/businesses/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "businesses",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id"
                    }
                  ]
                }
              },
              "status": "Not Acceptable",
              "code": 406,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Add an individual as an administrator for a business",
          "request": {
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "JSESSIONID",
                  "type": "string"
                },
                {
                  "key": "value",
                  "value": true,
                  "type": "boolean"
                },
                {
                  "key": "in",
                  "value": "header",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"userId\": 100\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/businesses/{{businessId}}/makeAdministrator",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "businesses",
                "{{businessId}}",
                "makeAdministrator"
              ]
            }
          },
          "response": [
            {
              "name": "Individual added as an administrator successfully",
              "originalRequest": {
                "method": "PUT",
                "header": [
                  {
                    "description": "Added as a part of security scheme: apikey",
                    "key": "JSESSIONID",
                    "value": "<API Key>"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"userId\": 100\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/businesses/:id/makeAdministrator",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "businesses",
                    ":id",
                    "makeAdministrator"
                  ],
                  "variable": [
                    {
                      "key": "id"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "The individual could not be added as an administrator, perhaps because it does not exist or is already an administrator.",
              "originalRequest": {
                "method": "PUT",
                "header": [
                  {
                    "description": "Added as a part of security scheme: apikey",
                    "key": "JSESSIONID",
                    "value": "<API Key>"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"userId\": 100\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/businesses/:id/makeAdministrator",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "businesses",
                    ":id",
                    "makeAdministrator"
                  ],
                  "variable": [
                    {
                      "key": "id"
                    }
                  ]
                }
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Access token is missing or invalid",
              "originalRequest": {
                "method": "PUT",
                "header": [
                  {
                    "description": "Added as a part of security scheme: apikey",
                    "key": "JSESSIONID",
                    "value": "<API Key>"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"userId\": 100\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/businesses/:id/makeAdministrator",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "businesses",
                    ":id",
                    "makeAdministrator"
                  ],
                  "variable": [
                    {
                      "key": "id"
                    }
                  ]
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Forbidden: Returned when the user making the request is not the primary administrator of the business AND is not a global application admin.",
              "originalRequest": {
                "method": "PUT",
                "header": [
                  {
                    "description": "Added as a part of security scheme: apikey",
                    "key": "JSESSIONID",
                    "value": "<API Key>"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"userId\": 100\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/businesses/:id/makeAdministrator",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "businesses",
                    ":id",
                    "makeAdministrator"
                  ],
                  "variable": [
                    {
                      "key": "id"
                    }
                  ]
                }
              },
              "status": "Forbidden",
              "code": 403,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "The requested route does exist (so not a 404) but some part of the request is not acceptable, for example trying to access a resource by an ID that does not exist.",
              "originalRequest": {
                "method": "PUT",
                "header": [
                  {
                    "description": "Added as a part of security scheme: apikey",
                    "key": "JSESSIONID",
                    "value": "<API Key>"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"userId\": 100\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/businesses/:id/makeAdministrator",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "businesses",
                    ":id",
                    "makeAdministrator"
                  ],
                  "variable": [
                    {
                      "key": "id"
                    }
                  ]
                }
              },
              "status": "Not Acceptable",
              "code": 406,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Remove an individual from administering a business",
          "request": {
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "JSESSIONID",
                  "type": "string"
                },
                {
                  "key": "value",
                  "value": true,
                  "type": "boolean"
                },
                {
                  "key": "in",
                  "value": "header",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"userId\": 100\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/businesses/{{businessId}}/removeAdministrator",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "businesses",
                "{{businessId}}",
                "removeAdministrator"
              ]
            }
          },
          "response": [
            {
              "name": "Inidividual removed from administering successfully",
              "originalRequest": {
                "method": "PUT",
                "header": [
                  {
                    "description": "Added as a part of security scheme: apikey",
                    "key": "JSESSIONID",
                    "value": "<API Key>"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"userId\": 100\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/businesses/:id/removeAdministrator",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "businesses",
                    ":id",
                    "removeAdministrator"
                  ],
                  "variable": [
                    {
                      "key": "id"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "The individual could not be removed from administering the business, perhaps because it does not exist, was not an administrator of the business, or is the primary administrator of the business.",
              "originalRequest": {
                "method": "PUT",
                "header": [
                  {
                    "description": "Added as a part of security scheme: apikey",
                    "key": "JSESSIONID",
                    "value": "<API Key>"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"userId\": 100\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/businesses/:id/removeAdministrator",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "businesses",
                    ":id",
                    "removeAdministrator"
                  ],
                  "variable": [
                    {
                      "key": "id"
                    }
                  ]
                }
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Access token is missing or invalid",
              "originalRequest": {
                "method": "PUT",
                "header": [
                  {
                    "description": "Added as a part of security scheme: apikey",
                    "key": "JSESSIONID",
                    "value": "<API Key>"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"userId\": 100\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/businesses/:id/removeAdministrator",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "businesses",
                    ":id",
                    "removeAdministrator"
                  ],
                  "variable": [
                    {
                      "key": "id"
                    }
                  ]
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Forbidden: Returned when the user making the request is not the primary administrator of the business AND is not a global application admin.",
              "originalRequest": {
                "method": "PUT",
                "header": [
                  {
                    "description": "Added as a part of security scheme: apikey",
                    "key": "JSESSIONID",
                    "value": "<API Key>"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"userId\": 100\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/businesses/:id/removeAdministrator",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "businesses",
                    ":id",
                    "removeAdministrator"
                  ],
                  "variable": [
                    {
                      "key": "id"
                    }
                  ]
                }
              },
              "status": "Forbidden",
              "code": 403,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "The requested route does exist (so not a 404) but some part of the request is not acceptable, for example trying to access a resource by an ID that does not exist.",
              "originalRequest": {
                "method": "PUT",
                "header": [
                  {
                    "description": "Added as a part of security scheme: apikey",
                    "key": "JSESSIONID",
                    "value": "<API Key>"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"userId\": 100\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/businesses/:id/removeAdministrator",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "businesses",
                    ":id",
                    "removeAdministrator"
                  ],
                  "variable": [
                    {
                      "key": "id"
                    }
                  ]
                }
              },
              "status": "Not Acceptable",
              "code": 406,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        }
      ]
    },
    {
      "name": "cards",
      "item": [
        {
          "name": "Create a new card to go on the community marketplace",
          "request": {
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "JSESSIONID",
                  "type": "string"
                },
                {
                  "key": "value",
                  "value": true,
                  "type": "boolean"
                },
                {
                  "key": "in",
                  "value": "header",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"title\": \"1982 Lada Samara\",\n    \"creatorId\": 100,\n    \"section\": \"ForSale\",\n    \"keywordIds\": [\n        41804565,\n        -30325281\n    ],\n    \"description\": \"Beige, suitable for a hen house. Fair condition. Some rust. As is, where is. Will swap for budgerigar.\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/cards",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "cards"
              ]
            }
          },
          "response": [
            {
              "name": "Card created successfully",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "description": "Added as a part of security scheme: apikey",
                    "key": "JSESSIONID",
                    "value": "<API Key>"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"title\": \"1982 Lada Samara\",\n    \"creatorId\": 100,\n    \"section\": \"ForSale\",\n    \"keywordIds\": [\n        85592704,\n        -70116620\n    ],\n    \"description\": \"Beige, suitable for a hen house. Fair condition. Some rust. As is, where is. Will swap for budgerigar.\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/cards",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "cards"
                  ]
                }
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n \"cardId\": 500\n}"
            },
            {
              "name": "There was some error with the data supplied by the user, appropriate error message(s) should be shown to user",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "description": "Added as a part of security scheme: apikey",
                    "key": "JSESSIONID",
                    "value": "<API Key>"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"title\": \"1982 Lada Samara\",\n    \"creatorId\": 100,\n    \"section\": \"ForSale\",\n    \"keywordIds\": [\n        85592704,\n        -70116620\n    ],\n    \"description\": \"Beige, suitable for a hen house. Fair condition. Some rust. As is, where is. Will swap for budgerigar.\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/cards",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "cards"
                  ]
                }
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Access token is missing or invalid",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "description": "Added as a part of security scheme: apikey",
                    "key": "JSESSIONID",
                    "value": "<API Key>"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"title\": \"1982 Lada Samara\",\n    \"creatorId\": 100,\n    \"section\": \"ForSale\",\n    \"keywordIds\": [\n        85592704,\n        -70116620\n    ],\n    \"description\": \"Beige, suitable for a hen house. Fair condition. Some rust. As is, where is. Will swap for budgerigar.\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/cards",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "cards"
                  ]
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Returned if a user who is not a GAA tries to create a card for somebody else.",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "description": "Added as a part of security scheme: apikey",
                    "key": "JSESSIONID",
                    "value": "<API Key>"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"title\": \"1982 Lada Samara\",\n    \"creatorId\": 100,\n    \"section\": \"ForSale\",\n    \"keywordIds\": [\n        85592704,\n        -70116620\n    ],\n    \"description\": \"Beige, suitable for a hen house. Fair condition. Some rust. As is, where is. Will swap for budgerigar.\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/cards",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "cards"
                  ]
                }
              },
              "status": "Forbidden",
              "code": 403,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Retrieve all cards for a given section",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "var index = utils.getTestIndex(pm.collectionVariables);  // getting the current index value",
                  "",
                  "// List the possible values to cycle through",
                  "sortByValues = [\"title\", \"created\", \"displayPeriodEnd\"];",
                  "isAscendingValues = [\"yes\", \"no\"];",
                  "pagIndexValues = [[0, \"\"], [0, 1], [1, 2]]  // In (start, end) format where `start` is pagStartIndex",
                  "",
                  "// Set the values as env vars, used as query params",
                  "sortByIndex = (Math.floor(index / 2)) % sortByValues.length;",
                  "isAscendingIndex = index % isAscendingValues.length;",
                  "pagIndexIndex = index % pagIndexValues.length;",
                  "pm.environment.set(\"sortBy\", sortByValues[sortByIndex]);",
                  "pm.environment.set(\"isAscending\", isAscendingValues[isAscendingIndex]);",
                  "pm.environment.set(\"pagStartIndex\", pagIndexValues[pagIndexIndex][0]);",
                  "pm.environment.set(\"pagEndIndex\", pagIndexValues[pagIndexIndex][1]);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var _ = require('lodash');",
                  "",
                  "var jsonData = pm.response.json();",
                  "",
                  "",
                  "// Test status code",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "",
                  "// Test that totalCount is a Number and is between 0 & the amount of data returned",
                  "pm.test(\"'totalCount' returns a valid number\", function () {",
                  "    pm.expect(jsonData.totalCount).to.satisfy((count) => !isNaN(count));",
                  "    pm.expect(jsonData.totalCount).to.above(jsonData.results.length-1);",
                  "});",
                  "",
                  "",
                  "// Test the size of results match pagination indexes",
                  "pm.test(\"Pagination indices return valid results\", function () {",
                  "    pagStartIndex = pm.environment.get(\"pagStartIndex\");",
                  "    // If start index is null then simplify it to zero",
                  "    pagStartIndex = !pagStartIndex ? 0 : pagStartIndex;",
                  "    pagEndIndex = pm.environment.get(\"pagEndIndex\");",
                  "    resLength = jsonData.results.length;",
                  "    totalCount = Number(jsonData.totalCount);",
                  "",
                  "    if (!pagEndIndex || pagEndIndex >= totalCount) {",
                  "        pm.expect(resLength).to.eql(totalCount - pagStartIndex);",
                  "    } else {",
                  "        pm.expect(resLength).to.eql(pagEndIndex - pagStartIndex + 1);",
                  "    }",
                  "});",
                  "",
                  "",
                  "// Test the response schema is correct",
                  "var schema = {",
                  "    \"properties\": {",
                  "        \"results\": {",
                  "            \"type\": \"array\",",
                  "            \"items\": {",
                  "                \"type\": \"object\"",
                  "            }",
                  "        },",
                  "        \"totalCount\": {",
                  "            \"type\": \"number\"",
                  "        }",
                  "    },",
                  "    \"required\": [\"results\", \"totalCount\"]",
                  "};",
                  "",
                  "pm.test('Response body is in expected schema', function () {",
                  "    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
                  "});",
                  "",
                  "",
                  "",
                  "// Increment the test index value, used to cycle through query params",
                  "utils.incrementTestIndex(pm.collectionVariables);",
                  "",
                  "sortBy = pm.environment.get(\"sortBy\");",
                  "// Match the lodash format (asc/desc)",
                  "isAscending = pm.environment.get(\"isAscending\") == \"yes\" ? \"asc\" : \"desc\";",
                  "",
                  "pm.test('Marketplace Card ' + sortBy + 's are in ' + isAscending + ' sorted order', () => {",
                  "   // Using the orderBy function from lodash ",
                  "   // Read docs: https://lodash.com/docs/4.17.10#orderBy",
                  "",
                  "   // I use `({ sortBy }) => sortBy || ''` so that nulls are ordered last in Ascending order to match the API",
                  "    var expectedSortedOrder = _.orderBy(jsonData.results, [( o ) => { return o[sortBy] || ''}],[isAscending]);",
                  "",
                  "    pm.expect(jsonData.results).to.eql(expectedSortedOrder);    ",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "JSESSIONID",
                  "type": "string"
                },
                {
                  "key": "value",
                  "value": true,
                  "type": "boolean"
                },
                {
                  "key": "in",
                  "value": "header",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/cards?section=ForSale&sortBy={{sortBy}}&isAscending={{isAscending}}&pagStartIndex={{pagStartIndex}}&pagEndIndex={{pagEndIndex}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "cards"
              ],
              "query": [
                {
                  "key": "section",
                  "value": "ForSale",
                  "description": "(Required) The section for which cards should be retrieved."
                },
                {
                  "key": "sortBy",
                  "value": "{{sortBy}}"
                },
                {
                  "key": "isAscending",
                  "value": "{{isAscending}}"
                },
                {
                  "key": "pagStartIndex",
                  "value": "{{pagStartIndex}}"
                },
                {
                  "key": "pagEndIndex",
                  "value": "{{pagEndIndex}}"
                }
              ]
            }
          },
          "response": [
            {
              "name": "Request successful, a (possibly empty) list of cards is returned",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "description": "Added as a part of security scheme: apikey",
                    "key": "JSESSIONID",
                    "value": "<API Key>"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/cards?section=ForSale",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "cards"
                  ],
                  "query": [
                    {
                      "key": "section",
                      "value": "ForSale"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "[\n {\n  \"title\": \"1982 Lada Samara\",\n  \"section\": \"ForSale\",\n  \"id\": 500,\n  \"creator\": {\n   \"firstName\": \"John\",\n   \"lastName\": \"Smith\",\n   \"email\": \"johnsmith99@gmail.com\",\n   \"dateOfBirth\": \"1999-04-27\",\n   \"homeAddress\": {\n    \"country\": \"New Zealand\",\n    \"streetNumber\": \"3/24\",\n    \"streetName\": \"Ilam Road\",\n    \"suburb\": \"Upper Riccarton\",\n    \"city\": \"Christchurch\",\n    \"region\": \"Canterbury\",\n    \"postcode\": \"90210\"\n   },\n   \"id\": 100,\n   \"middleName\": \"Hector\",\n   \"nickname\": \"Jonny\",\n   \"bio\": \"Likes long walks on the beach\",\n   \"phoneNumber\": \"+64 3 555 0129\",\n   \"created\": \"2020-07-14T14:32:00Z\",\n   \"role\": \"defaultGlobalApplicationAdmin\",\n   \"businessesAdministered\": [\n    {\n     \"value\": \"<Circular reference to #/components/schemas/Business detected>\"\n    },\n    {\n     \"value\": \"<Circular reference to #/components/schemas/Business detected>\"\n    }\n   ]\n  },\n  \"created\": \"2021-07-15T05:10:00Z\",\n  \"displayPeriodEnd\": \"2021-07-29T05:10:00Z\",\n  \"description\": \"Beige, suitable for a hen house. Fair condition. Some rust. As is, where is. Will swap for budgerigar.\",\n  \"keywords\": [\n   {\n    \"id\": 600,\n    \"name\": \"Vehicle\",\n    \"created\": \"2021-07-15T05:10:00Z\"\n   },\n   {\n    \"id\": 600,\n    \"name\": \"Vehicle\",\n    \"created\": \"2021-07-15T05:10:00Z\"\n   }\n  ]\n },\n {\n  \"title\": \"1982 Lada Samara\",\n  \"section\": \"ForSale\",\n  \"id\": 500,\n  \"creator\": {\n   \"firstName\": \"John\",\n   \"lastName\": \"Smith\",\n   \"email\": \"johnsmith99@gmail.com\",\n   \"dateOfBirth\": \"1999-04-27\",\n   \"homeAddress\": {\n    \"country\": \"New Zealand\",\n    \"streetNumber\": \"3/24\",\n    \"streetName\": \"Ilam Road\",\n    \"suburb\": \"Upper Riccarton\",\n    \"city\": \"Christchurch\",\n    \"region\": \"Canterbury\",\n    \"postcode\": \"90210\"\n   },\n   \"id\": 100,\n   \"middleName\": \"Hector\",\n   \"nickname\": \"Jonny\",\n   \"bio\": \"Likes long walks on the beach\",\n   \"phoneNumber\": \"+64 3 555 0129\",\n   \"created\": \"2020-07-14T14:32:00Z\",\n   \"role\": \"user\",\n   \"businessesAdministered\": [\n    {\n     \"value\": \"<Circular reference to #/components/schemas/Business detected>\"\n    },\n    {\n     \"value\": \"<Circular reference to #/components/schemas/Business detected>\"\n    }\n   ]\n  },\n  \"created\": \"2021-07-15T05:10:00Z\",\n  \"displayPeriodEnd\": \"2021-07-29T05:10:00Z\",\n  \"description\": \"Beige, suitable for a hen house. Fair condition. Some rust. As is, where is. Will swap for budgerigar.\",\n  \"keywords\": [\n   {\n    \"id\": 600,\n    \"name\": \"Vehicle\",\n    \"created\": \"2021-07-15T05:10:00Z\"\n   },\n   {\n    \"id\": 600,\n    \"name\": \"Vehicle\",\n    \"created\": \"2021-07-15T05:10:00Z\"\n   }\n  ]\n }\n]"
            },
            {
              "name": "There was some error with the data supplied by the user, appropriate error message(s) should be shown to user",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "description": "Added as a part of security scheme: apikey",
                    "key": "JSESSIONID",
                    "value": "<API Key>"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/cards?section=ForSale",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "cards"
                  ],
                  "query": [
                    {
                      "key": "section",
                      "value": "ForSale"
                    }
                  ]
                }
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Access token is missing or invalid",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "description": "Added as a part of security scheme: apikey",
                    "key": "JSESSIONID",
                    "value": "<API Key>"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/cards?section=ForSale",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "cards"
                  ],
                  "query": [
                    {
                      "key": "section",
                      "value": "ForSale"
                    }
                  ]
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Search for cards based on some keywords",
          "request": {
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "JSESSIONID",
                  "type": "string"
                },
                {
                  "key": "value",
                  "value": true,
                  "type": "boolean"
                },
                {
                  "key": "in",
                  "value": "header",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/cards/search?keywordIds=-80125416&keywordIds=-38105008&section=ForSale&union=false",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "cards",
                "search"
              ],
              "query": [
                {
                  "key": "keywordIds",
                  "value": "-80125416",
                  "description": "(Required) The IDs of keywords by which cards are being searched"
                },
                {
                  "key": "keywordIds",
                  "value": "-38105008",
                  "description": "(Required) The IDs of keywords by which cards are being searched"
                },
                {
                  "key": "section",
                  "value": "ForSale",
                  "description": "(Required) The section for which cards should be retrieved."
                },
                {
                  "key": "union",
                  "value": "false",
                  "description": "(Required) Whether or not to get cards that match ANY of the keywords, or only cards that match ALL of the keywords. True = Match ANY, False = Match ALL"
                }
              ]
            }
          },
          "response": [
            {
              "name": "Request successful, a (possibly empty) list of cards is returned",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "description": "Added as a part of security scheme: apikey",
                    "key": "JSESSIONID",
                    "value": "<API Key>"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/cards/search?keywordIds=-2020432&keywordIds=-43015898&section=ForSale&union=true",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "cards",
                    "search"
                  ],
                  "query": [
                    {
                      "key": "keywordIds",
                      "value": "-2020432"
                    },
                    {
                      "key": "keywordIds",
                      "value": "-43015898"
                    },
                    {
                      "key": "section",
                      "value": "ForSale"
                    },
                    {
                      "key": "union",
                      "value": "true"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "[\n {\n  \"title\": \"1982 Lada Samara\",\n  \"section\": \"ForSale\",\n  \"id\": 500,\n  \"creator\": {\n   \"firstName\": \"John\",\n   \"lastName\": \"Smith\",\n   \"email\": \"johnsmith99@gmail.com\",\n   \"dateOfBirth\": \"1999-04-27\",\n   \"homeAddress\": {\n    \"country\": \"New Zealand\",\n    \"streetNumber\": \"3/24\",\n    \"streetName\": \"Ilam Road\",\n    \"suburb\": \"Upper Riccarton\",\n    \"city\": \"Christchurch\",\n    \"region\": \"Canterbury\",\n    \"postcode\": \"90210\"\n   },\n   \"id\": 100,\n   \"middleName\": \"Hector\",\n   \"nickname\": \"Jonny\",\n   \"bio\": \"Likes long walks on the beach\",\n   \"phoneNumber\": \"+64 3 555 0129\",\n   \"created\": \"2020-07-14T14:32:00Z\",\n   \"role\": \"defaultGlobalApplicationAdmin\",\n   \"businessesAdministered\": [\n    {\n     \"value\": \"<Circular reference to #/components/schemas/Business detected>\"\n    },\n    {\n     \"value\": \"<Circular reference to #/components/schemas/Business detected>\"\n    }\n   ]\n  },\n  \"created\": \"2021-07-15T05:10:00Z\",\n  \"displayPeriodEnd\": \"2021-07-29T05:10:00Z\",\n  \"description\": \"Beige, suitable for a hen house. Fair condition. Some rust. As is, where is. Will swap for budgerigar.\",\n  \"keywords\": [\n   {\n    \"id\": 600,\n    \"name\": \"Vehicle\",\n    \"created\": \"2021-07-15T05:10:00Z\"\n   },\n   {\n    \"id\": 600,\n    \"name\": \"Vehicle\",\n    \"created\": \"2021-07-15T05:10:00Z\"\n   }\n  ]\n },\n {\n  \"title\": \"1982 Lada Samara\",\n  \"section\": \"ForSale\",\n  \"id\": 500,\n  \"creator\": {\n   \"firstName\": \"John\",\n   \"lastName\": \"Smith\",\n   \"email\": \"johnsmith99@gmail.com\",\n   \"dateOfBirth\": \"1999-04-27\",\n   \"homeAddress\": {\n    \"country\": \"New Zealand\",\n    \"streetNumber\": \"3/24\",\n    \"streetName\": \"Ilam Road\",\n    \"suburb\": \"Upper Riccarton\",\n    \"city\": \"Christchurch\",\n    \"region\": \"Canterbury\",\n    \"postcode\": \"90210\"\n   },\n   \"id\": 100,\n   \"middleName\": \"Hector\",\n   \"nickname\": \"Jonny\",\n   \"bio\": \"Likes long walks on the beach\",\n   \"phoneNumber\": \"+64 3 555 0129\",\n   \"created\": \"2020-07-14T14:32:00Z\",\n   \"role\": \"user\",\n   \"businessesAdministered\": [\n    {\n     \"value\": \"<Circular reference to #/components/schemas/Business detected>\"\n    },\n    {\n     \"value\": \"<Circular reference to #/components/schemas/Business detected>\"\n    }\n   ]\n  },\n  \"created\": \"2021-07-15T05:10:00Z\",\n  \"displayPeriodEnd\": \"2021-07-29T05:10:00Z\",\n  \"description\": \"Beige, suitable for a hen house. Fair condition. Some rust. As is, where is. Will swap for budgerigar.\",\n  \"keywords\": [\n   {\n    \"id\": 600,\n    \"name\": \"Vehicle\",\n    \"created\": \"2021-07-15T05:10:00Z\"\n   },\n   {\n    \"id\": 600,\n    \"name\": \"Vehicle\",\n    \"created\": \"2021-07-15T05:10:00Z\"\n   }\n  ]\n }\n]"
            },
            {
              "name": "There was some error with the data supplied by the user, appropriate error message(s) should be shown to user",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "description": "Added as a part of security scheme: apikey",
                    "key": "JSESSIONID",
                    "value": "<API Key>"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/cards/search?keywordIds=-2020432&keywordIds=-43015898&section=ForSale&union=true",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "cards",
                    "search"
                  ],
                  "query": [
                    {
                      "key": "keywordIds",
                      "value": "-2020432"
                    },
                    {
                      "key": "keywordIds",
                      "value": "-43015898"
                    },
                    {
                      "key": "section",
                      "value": "ForSale"
                    },
                    {
                      "key": "union",
                      "value": "true"
                    }
                  ]
                }
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Access token is missing or invalid",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "description": "Added as a part of security scheme: apikey",
                    "key": "JSESSIONID",
                    "value": "<API Key>"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/cards/search?keywordIds=-2020432&keywordIds=-43015898&section=ForSale&union=true",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "cards",
                    "search"
                  ],
                  "query": [
                    {
                      "key": "keywordIds",
                      "value": "-2020432"
                    },
                    {
                      "key": "keywordIds",
                      "value": "-43015898"
                    },
                    {
                      "key": "section",
                      "value": "ForSale"
                    },
                    {
                      "key": "union",
                      "value": "true"
                    }
                  ]
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Retrieve a specific card",
          "request": {
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "JSESSIONID",
                  "type": "string"
                },
                {
                  "key": "value",
                  "value": true,
                  "type": "boolean"
                },
                {
                  "key": "in",
                  "value": "header",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/cards/:id",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "cards",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "500",
                  "description": "(Required) The id of the card to get."
                }
              ]
            }
          },
          "response": [
            {
              "name": "Request successful, a card is returned.",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "description": "Added as a part of security scheme: apikey",
                    "key": "JSESSIONID",
                    "value": "<API Key>"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/cards/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "cards",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n \"title\": \"1982 Lada Samara\",\n \"section\": \"ForSale\",\n \"id\": 500,\n \"creator\": {\n  \"firstName\": \"John\",\n  \"lastName\": \"Smith\",\n  \"email\": \"johnsmith99@gmail.com\",\n  \"dateOfBirth\": \"1999-04-27\",\n  \"homeAddress\": {\n   \"country\": \"New Zealand\",\n   \"streetNumber\": \"3/24\",\n   \"streetName\": \"Ilam Road\",\n   \"suburb\": \"Upper Riccarton\",\n   \"city\": \"Christchurch\",\n   \"region\": \"Canterbury\",\n   \"postcode\": \"90210\"\n  },\n  \"id\": 100,\n  \"middleName\": \"Hector\",\n  \"nickname\": \"Jonny\",\n  \"bio\": \"Likes long walks on the beach\",\n  \"phoneNumber\": \"+64 3 555 0129\",\n  \"created\": \"2020-07-14T14:32:00Z\",\n  \"role\": \"user\",\n  \"businessesAdministered\": [\n   {\n    \"value\": \"<Circular reference to #/components/schemas/Business detected>\"\n   },\n   {\n    \"value\": \"<Circular reference to #/components/schemas/Business detected>\"\n   }\n  ]\n },\n \"created\": \"2021-07-15T05:10:00Z\",\n \"displayPeriodEnd\": \"2021-07-29T05:10:00Z\",\n \"description\": \"Beige, suitable for a hen house. Fair condition. Some rust. As is, where is. Will swap for budgerigar.\",\n \"keywords\": [\n  {\n   \"id\": 600,\n   \"name\": \"Vehicle\",\n   \"created\": \"2021-07-15T05:10:00Z\"\n  },\n  {\n   \"id\": 600,\n   \"name\": \"Vehicle\",\n   \"created\": \"2021-07-15T05:10:00Z\"\n  }\n ]\n}"
            },
            {
              "name": "There was some error with the data supplied by the user, appropriate error message(s) should be shown to user",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "description": "Added as a part of security scheme: apikey",
                    "key": "JSESSIONID",
                    "value": "<API Key>"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/cards/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "cards",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id"
                    }
                  ]
                }
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Access token is missing or invalid",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "description": "Added as a part of security scheme: apikey",
                    "key": "JSESSIONID",
                    "value": "<API Key>"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/cards/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "cards",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id"
                    }
                  ]
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "The requested route does exist (so not a 404) but some part of the request is not acceptable, for example trying to access a resource by an ID that does not exist.",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "description": "Added as a part of security scheme: apikey",
                    "key": "JSESSIONID",
                    "value": "<API Key>"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/cards/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "cards",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id"
                    }
                  ]
                }
              },
              "status": "Not Acceptable",
              "code": 406,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Delete a community marketplace card",
          "request": {
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "JSESSIONID",
                  "type": "string"
                },
                {
                  "key": "value",
                  "value": true,
                  "type": "boolean"
                },
                {
                  "key": "in",
                  "value": "header",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/cards/:id",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "cards",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "500",
                  "description": "(Required) The id of the card to get."
                }
              ]
            }
          },
          "response": [
            {
              "name": "Card deleted successfully",
              "originalRequest": {
                "method": "DELETE",
                "header": [
                  {
                    "description": "Added as a part of security scheme: apikey",
                    "key": "JSESSIONID",
                    "value": "<API Key>"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/cards/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "cards",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Access token is missing or invalid",
              "originalRequest": {
                "method": "DELETE",
                "header": [
                  {
                    "description": "Added as a part of security scheme: apikey",
                    "key": "JSESSIONID",
                    "value": "<API Key>"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/cards/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "cards",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id"
                    }
                  ]
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Forbidden: Returned when a user tries to delete a card that they are not the creator of AND the user is not a GAA",
              "originalRequest": {
                "method": "DELETE",
                "header": [
                  {
                    "description": "Added as a part of security scheme: apikey",
                    "key": "JSESSIONID",
                    "value": "<API Key>"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/cards/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "cards",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id"
                    }
                  ]
                }
              },
              "status": "Forbidden",
              "code": 403,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "The requested route does exist (so not a 404) but some part of the request is not acceptable, for example trying to access a resource by an ID that does not exist.",
              "originalRequest": {
                "method": "DELETE",
                "header": [
                  {
                    "description": "Added as a part of security scheme: apikey",
                    "key": "JSESSIONID",
                    "value": "<API Key>"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/cards/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "cards",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id"
                    }
                  ]
                }
              },
              "status": "Not Acceptable",
              "code": 406,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Extend the display period of a card that is nearing expiry",
          "request": {
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "JSESSIONID",
                  "type": "string"
                },
                {
                  "key": "value",
                  "value": true,
                  "type": "boolean"
                },
                {
                  "key": "in",
                  "value": "header",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/cards/:id/extenddisplayperiod",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "cards",
                ":id",
                "extenddisplayperiod"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "500",
                  "description": "(Required) The id of the card to get."
                }
              ]
            }
          },
          "response": [
            {
              "name": "End of display period successfully extended. Extension amount should be a further two weeks.",
              "originalRequest": {
                "method": "PUT",
                "header": [
                  {
                    "description": "Added as a part of security scheme: apikey",
                    "key": "JSESSIONID",
                    "value": "<API Key>"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/cards/:id/extenddisplayperiod",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "cards",
                    ":id",
                    "extenddisplayperiod"
                  ],
                  "variable": [
                    {
                      "key": "id"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Access token is missing or invalid",
              "originalRequest": {
                "method": "PUT",
                "header": [
                  {
                    "description": "Added as a part of security scheme: apikey",
                    "key": "JSESSIONID",
                    "value": "<API Key>"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/cards/:id/extenddisplayperiod",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "cards",
                    ":id",
                    "extenddisplayperiod"
                  ],
                  "variable": [
                    {
                      "key": "id"
                    }
                  ]
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Forbidden: Returned when a user who is neither the creator of the card, nor a GAA, tries to extend the display period of the card.",
              "originalRequest": {
                "method": "PUT",
                "header": [
                  {
                    "description": "Added as a part of security scheme: apikey",
                    "key": "JSESSIONID",
                    "value": "<API Key>"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/cards/:id/extenddisplayperiod",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "cards",
                    ":id",
                    "extenddisplayperiod"
                  ],
                  "variable": [
                    {
                      "key": "id"
                    }
                  ]
                }
              },
              "status": "Forbidden",
              "code": 403,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "The requested route does exist (so not a 404) but some part of the request is not acceptable, for example trying to access a resource by an ID that does not exist.",
              "originalRequest": {
                "method": "PUT",
                "header": [
                  {
                    "description": "Added as a part of security scheme: apikey",
                    "key": "JSESSIONID",
                    "value": "<API Key>"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/cards/:id/extenddisplayperiod",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "cards",
                    ":id",
                    "extenddisplayperiod"
                  ],
                  "variable": [
                    {
                      "key": "id"
                    }
                  ]
                }
              },
              "status": "Not Acceptable",
              "code": 406,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        }
      ]
    },
    {
      "name": "keywords",
      "item": [
        {
          "name": "Create a new system-wide keyword",
          "request": {
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "JSESSIONID",
                  "type": "string"
                },
                {
                  "key": "value",
                  "value": true,
                  "type": "boolean"
                },
                {
                  "key": "in",
                  "value": "header",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"Vehicle\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/keywords",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "keywords"
              ]
            }
          },
          "response": [
            {
              "name": "Keyword created successfully",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "description": "Added as a part of security scheme: apikey",
                    "key": "JSESSIONID",
                    "value": "<API Key>"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"Vehicle\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/keywords",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "keywords"
                  ]
                }
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n \"keywordId\": 600\n}"
            },
            {
              "name": "There was some error with the data supplied by the user, appropriate error message(s) should be shown to user",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "description": "Added as a part of security scheme: apikey",
                    "key": "JSESSIONID",
                    "value": "<API Key>"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"Vehicle\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/keywords",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "keywords"
                  ]
                }
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Access token is missing or invalid",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "description": "Added as a part of security scheme: apikey",
                    "key": "JSESSIONID",
                    "value": "<API Key>"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"Vehicle\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/keywords",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "keywords"
                  ]
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Search for keywords by partial (or complete) name",
          "request": {
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "JSESSIONID",
                  "type": "string"
                },
                {
                  "key": "value",
                  "value": true,
                  "type": "boolean"
                },
                {
                  "key": "in",
                  "value": "header",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/keywords/search?searchQuery=Duis",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "keywords",
                "search"
              ],
              "query": [
                {
                  "key": "searchQuery",
                  "value": "Duis",
                  "description": "(Required) Criteria to search keywords for, all partial and complete matches are returned"
                }
              ]
            }
          },
          "response": [
            {
              "name": "Request successful, a (possibly empty) list of keywords is returned",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "description": "Added as a part of security scheme: apikey",
                    "key": "JSESSIONID",
                    "value": "<API Key>"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/keywords/search?searchQuery=Duis",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "keywords",
                    "search"
                  ],
                  "query": [
                    {
                      "key": "searchQuery",
                      "value": "Duis"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "[\n {\n  \"id\": 600,\n  \"name\": \"Vehicle\",\n  \"created\": \"2021-07-15T05:10:00Z\"\n },\n {\n  \"id\": 600,\n  \"name\": \"Vehicle\",\n  \"created\": \"2021-07-15T05:10:00Z\"\n }\n]"
            },
            {
              "name": "Access token is missing or invalid",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "description": "Added as a part of security scheme: apikey",
                    "key": "JSESSIONID",
                    "value": "<API Key>"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/keywords/search?searchQuery=Duis",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "keywords",
                    "search"
                  ],
                  "query": [
                    {
                      "key": "searchQuery",
                      "value": "Duis"
                    }
                  ]
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Delete a keyword as an admin",
          "request": {
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "JSESSIONID",
                  "type": "string"
                },
                {
                  "key": "value",
                  "value": true,
                  "type": "boolean"
                },
                {
                  "key": "in",
                  "value": "header",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/keywords/:id",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "keywords",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "600",
                  "description": "(Required) ID of keyword to delete"
                }
              ]
            }
          },
          "response": [
            {
              "name": "Keyword successfully deleted",
              "originalRequest": {
                "method": "DELETE",
                "header": [
                  {
                    "description": "Added as a part of security scheme: apikey",
                    "key": "JSESSIONID",
                    "value": "<API Key>"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/keywords/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "keywords",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Access token is missing or invalid",
              "originalRequest": {
                "method": "DELETE",
                "header": [
                  {
                    "description": "Added as a part of security scheme: apikey",
                    "key": "JSESSIONID",
                    "value": "<API Key>"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/keywords/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "keywords",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id"
                    }
                  ]
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Forbidden: Returned if a non-GAA user attempts to delete any card.",
              "originalRequest": {
                "method": "DELETE",
                "header": [
                  {
                    "description": "Added as a part of security scheme: apikey",
                    "key": "JSESSIONID",
                    "value": "<API Key>"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/keywords/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "keywords",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id"
                    }
                  ]
                }
              },
              "status": "Forbidden",
              "code": 403,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        }
      ]
    },
    {
      "name": "listings",
      "item": [
        {
          "name": "Search Listings Tests",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const store = pm.environment;",
                  "",
                  "const testIndex = utils.getTestIndex(pm.collectionVariables);",
                  "// Increment the test index value, used to cycle through query params",
                  "utils.incrementTestIndex(pm.collectionVariables);",
                  "",
                  "utils.autoLogin(pm);",
                  "",
                  "",
                  "const setRequestVariables = params => {",
                  "    // params = { paramName: [paramValues]}",
                  "    const consoleStrings = [];",
                  "    const cycleLength = Math.max(...Object.values(params).map(arr => Array.isArray(arr)? arr.length: 0));",
                  "    // If some parameters have more values in the array, other parameters will loop through",
                  "    Object.keys(params).forEach(paramName => {",
                  "        if (!Array.isArray(params[paramName]) || params[paramName].length == 0) return;",
                  "        const index = (testIndex % cycleLength) % params[paramName].length;",
                  "        // cycleLength can be greater than length of array, so in this case another modulus operation is needed",
                  "        ",
                  "        const key = paramName;",
                  "        let values = params[paramName][index];",
                  "        if (!Array.isArray(values)) values = [values]; // some are arrays that need to be added twice. Easier to make non arrays arrays than handle arrays separately",
                  "        values.forEach(val => {",
                  "            if (val == null || val == \"\" || val == undefined) {",
                  "                // half the time don't send null or empty string values",
                  "                if (Math.random() < 0.5) return;",
                  "                val = \"\"; // convert to empty string",
                  "            }",
                  "            pm.request.addQueryParams([`${key}=${encodeURIComponent(val)}`]);",
                  "            consoleStrings.push(`${paramName}: ${val}`);",
                  "        })",
                  "    });",
                  "",
                  "    console.log(`Test index: ${testIndex}\\n` + consoleStrings.join(\",\\n\"));",
                  "}",
                  "",
                  "",
                  "const searchKeys = [\"PRODUCT_NAME\", \"BUSINESS_NAME\", \"ADDRESS\"];",
                  "",
                  "const allPossibleCombinations = elements => {",
                  "    let combinations = [[]];",
                  "    const addOneElement = (combination, elementsToAdd) => {",
                  "        // Given a combination, creates a new combination with an element from `elementsToAdd`",
                  "        for(let i = 0; i < elementsToAdd.length; i++) {",
                  "            const el = elementsToAdd[i];",
                  "            const newCombination = [...combination];",
                  "            newCombination.push(el);",
                  "            combinations.push(newCombination);",
                  "            addOneElement(newCombination, elementsToAdd.slice(i + 1));",
                  "        }",
                  "    }",
                  "",
                  "    addOneElement([], elements);",
                  "    return combinations;",
                  "}",
                  "",
                  "const mapFilterDates = dates => {",
                  "    const setTime = (dateString, hours, minutes, seconds, milliseconds) => {",
                  "      const date = new Date(dateString);",
                  "      date.setHours(hours);",
                  "      date.setMinutes(minutes);",
                  "      date.setSeconds(seconds);",
                  "      date.setMilliseconds(milliseconds);",
                  "      return date.toISOString();",
                  "    }",
                  "",
                  "    if (Array.isArray(dates) && dates.length == 2) {",
                  "        if (new Date(dates[0]).getTime() > new Date(dates[1]).getTime()) {",
                  "            dates = [dates[1], dates[0]];",
                  "        }",
                  "    }",
                  "",
                  "    if (Array.isArray(dates)) {",
                  "      if (dates.length) {",
                  "        const lastEl = dates.length - 1;",
                  "        dates[lastEl] = setTime(",
                  "            dates[lastEl], 23, 59, 59, 999",
                  "        );",
                  "      }",
                  "      if (dates.length == 2) {",
                  "        dates[0] = setTime(",
                  "            dates[0], 0, 0, 0, 0",
                  "        );",
                  "      }",
                  "    }",
                  "",
                  "    return dates;",
                  "}",
                  "",
                  "setRequestVariables({",
                  "    sortBy       : Object.keys(utils.LISTINGS_SEARCH_SORT_KEY_PATHS),",
                  "    isAscending  : [true, false],",
                  "    pagStartIndex: [0, 2],",
                  "    pagEndIndex  : [\"\", 100, 1, 5],",
                  "    searchKeys   : allPossibleCombinations(searchKeys),",
                  "    searchParam  : [\"Pie Palace\", null, \"%%\", \"palace AND macs\", \"new zealand\", \"\", \"DROP TABLE USERS\"],",
                  "    businessTypes: allPossibleCombinations([\"ACCOMMODATION_AND_FOOD\", \"RETAIL\", \"CHARITY\", \"NON_PROFIT\"]),",
                  "    minPrice     : [\"\", 10, \"\", 5, 30, 12, 3],",
                  "    maxPrice     : [\"\", 54, 6, 3, \"\", 12],",
                  "    filterDates  : [[\"2021-06-10\", \"2021-08-30\"], [\"2020-09-30\"], [\"2021-07-30\"], []].map(mapFilterDates),",
                  "    ",
                  "    // sortBy       : [],",
                  "    // isAscending  : [true],",
                  "    // pagStartIndex: [\"0\"],",
                  "    // pagEndIndex  : [\"10\"],",
                  "    // searchKeys   : [\"\"],",
                  "    // searchParam  : [\"\"],",
                  "    // // businessTypes: [[]],",
                  "    // minPrice     : [\"\"],",
                  "    // maxPrice     : [\"\"],",
                  "    // filterDates  : [[\"1979-05-30\", \"2050-05-04\"]].map(mapFilterDates)",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "_ = require('lodash');",
                  "const store = pm.environment;",
                  "",
                  "const jsonData = pm.response.json();",
                  "",
                  "const queryParams = {};",
                  "pm.request.url.query.all().map(({key, value}) => {",
                  "    if (queryParams[key] != undefined) {",
                  "        if (!Array.isArray(queryParams[key])) queryParams[key] = [queryParams[key]];",
                  "        queryParams[key].push(value);",
                  "    } else {",
                  "        queryParams[key] = value;",
                  "    }",
                  "});",
                  "",
                  "// get query parameters from URL and put into object",
                  "",
                  "// Test status code",
                  "pm.test(`Status code is 200, (unrelated, num results: ${jsonData? jsonData.results.length: \"?\"})`, function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "",
                  "// Test that totalCount is a Number and is between 0 & the amount of data returned",
                  "pm.test(\"'totalCount' returns a valid number\", function () {",
                  "    pm.expect(jsonData.totalCount).to.satisfy((count) => !isNaN(count));",
                  "    pm.expect(jsonData.totalCount).to.above(jsonData.results.length - 1);",
                  "});",
                  "",
                  "",
                  "// Test the size of results match pagination indexes",
                  "pm.test(\"Pagination indicies returns valid number\", function () {",
                  "    let pagStartIndex = parseInt(queryParams.pagStartIndex, 10);",
                  "    // If start index is null then simplify it to zero",
                  "    if (isNaN(pagStartIndex)) pagStartIndex = 0;",
                  "    let pagEndIndex = parseInt(queryParams.pagEndIndex, 10);",
                  "    if (isNaN(pagEndIndex)) pagEndIndex = null;",
                  "    ",
                  "    const resLength = jsonData.results.length;",
                  "    const totalCount = Number(jsonData.totalCount);",
                  "",
                  "    if (pagEndIndex == null) {",
                  "        pm.expect(totalCount).to.equal(Math.max(0, resLength - pagStartIndex));",
                  "        // if pagStartIndex > totalCount, 0 results returned",
                  "    } else {",
                  "        if (pagEndIndex >= totalCount) {",
                  "            pm.expect(resLength).lessThan(Math.max(pagEndIndex - pagStartIndex + 1, 0))",
                  "        } else {",
                  "            pm.expect(resLength).to.equal(Math.max(pagEndIndex - pagStartIndex + 1, 0));",
                  "        }",
                  "    }",
                  "});",
                  "",
                  "",
                  "// Test the response schema is correct",
                  "// Made using https://app.quicktype.io/#l=schema",
                  "// Validate with https://www.jsonschemavalidator.net/",
                  "const schema = {$ref:\"#/definitions/Root\",definitions:{Root:{type:\"object\",additionalProperties:!1,properties:{results:{type:\"array\",items:{$ref:\"#/definitions/Listing\"}},totalCount:{type:\"integer\",minimum:0}},required:[\"results\",\"totalCount\"],title:\"Root\"},Listing:{type:\"object\",additionalProperties:!1,properties:{id:{type:\"integer\",minimum:0},inventoryItem:{$ref:\"#/definitions/InventoryItem\"},quantity:{type:\"integer\",minimum:0},price:{type:\"number\",minimum:0},moreInfo:{anyOf:[{type:\"null\"},{type:\"string\"}]},created:{type:\"string\",format:\"date-time\"},closes:{type:\"string\",format:\"date-time\"}},required:[\"closes\",\"created\",\"id\",\"inventoryItem\",\"moreInfo\",\"price\",\"quantity\"],title:\"Listing\"},InventoryItem:{type:\"object\",additionalProperties:!1,properties:{id:{type:\"integer\",minimum:0},product:{$ref:\"#/definitions/Product\"},quantity:{type:\"integer\",minimum:0},pricePerItem:{type:\"number\",minimum:0},totalPrice:{type:\"number\",minimum:0},expires:{type:\"string\",format:\"date\"},manufactured:{type:\"string\",format:\"date\"},sellBy:{type:\"string\",format:\"date\"},bestBefore:{type:\"string\",format:\"date\"},business:{$ref:\"#/definitions/Business\"}},required:[\"bestBefore\",\"business\",\"expires\",\"id\",\"manufactured\",\"pricePerItem\",\"product\",\"quantity\",\"sellBy\",\"totalPrice\"],title:\"InventoryItem\"},Product:{type:\"object\",additionalProperties:!1,properties:{id:{type:\"integer\",minimum:0},name:{type:\"string\"},description:{type:\"string\"},manufacturer:{type:\"string\"},recommendedRetailPrice:{type:\"number\",minimum:0},created:{type:\"string\",format:\"date-time\"},images:{type:\"array\",items:{$ref:\"#/definitions/ProductImage\"}}},required:[\"created\",\"description\",\"id\",\"images\",\"name\",\"recommendedRetailPrice\"],title:\"Product\"},ProductImage:{type:\"object\",additionalProperties:!1,properties:{id:{type:\"integer\",minimum:0},filename:{type:\"string\"},thumbnailFilename:{type:\"string\"}},required:[\"id\",\"filename\",\"thumbnailFilename\"],title:\"ProductImage\"},Business:{type:\"object\",additionalProperties:!1,properties:{id:{type:\"integer\",minimum:0},primaryAdministratorId:{type:\"integer\",minimum:0},name:{type:\"string\"},description:{type:\"string\"},address:{$ref:\"#/definitions/Address\"},businessType:{type:\"string\"},created:{type:\"string\",format:\"date-time\"}},required:[\"address\",\"businessType\",\"created\",\"description\",\"id\",\"name\",\"primaryAdministratorId\"],title:\"Business\"},Address:{type:\"object\",additionalProperties:!1,properties:{streetNumber:{type:[\"string\",\"null\"]},streetName:{type:[\"string\",\"null\"]},suburb:{type:[\"string\",\"null\"]},postcode:{type:[\"string\",\"null\"]},city:{type:[\"string\",\"null\"]},region:{type:[\"string\",\"null\"]},country:{type:[\"string\",\"null\"]}},required:[\"country\"],title:\"Address\"}}};",
                  "",
                  "pm.test('Response body is in expected schema', function () {",
                  "    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
                  "});",
                  "",
                  "",
                  "const sortBy = queryParams.sortBy !== undefined? queryParams.sortBy: \"created\";",
                  "",
                  "if (utils.LISTINGS_SEARCH_SORT_KEY_PATHS[sortBy] == undefined) {",
                  "    pm.fail(`Sort by key ${sortBy} not found in LISTINGS_SEARCH_SORT_KEY_PATHS (defined in collection pre-request script)`)",
                  "}",
                  "",
                  "// Match the lodash format (asc/desc). Default to ascending",
                  "const isAscending = queryParams.isAscending == \"false\"? \"desc\" : \"asc\";",
                  "",
                  "pm.test(`Listing sorted by ${sortBy} in ${isAscending}ending order`, () => {",
                  "   // Using the orderBy function from lodash ",
                  "   // Read docs: https://lodash.com/docs/4.17.10#orderBy    ",
                  "",
                  "    const keyPath = utils.LISTINGS_SEARCH_SORT_KEY_PATHS[sortBy];",
                  "   // I use `({ sortBy }) => sortBy || ''` so that nulls are ordered last in Ascending order to match the API",
                  "    const expectedSortedOrder = _.orderBy(jsonData.results, [el => keyPath(el) || \"\"], [isAscending]);",
                  "    ",
                  "    pm.expect(jsonData.results).to.eql(expectedSortedOrder, \"Got given order: \" +",
                  "        jsonData.results.map(el => `\"${keyPath(el)}\"`).join(\", \")",
                  "    );",
                  "});",
                  "",
                  "",
                  "const BUSINESS_TYPE_ENUM_MAP = {",
                  "  ACCOMMODATION_AND_FOOD: \"Accommodation and Food Services\",",
                  "  RETAIL: \"Retail Trade\",",
                  "  CHARITY: \"Charitable organisation\",",
                  "  NON_PROFIT: \"Non-profit organisation\"",
                  "}",
                  "",
                  "let businessTypes = (Array.isArray(queryParams.businessTypes)?",
                  "        queryParams.businessTypes:",
                  "        [queryParams.businessTypes]",
                  "    ).filter(el => typeof el == \"string\" && el.length);",
                  "// If none sent, returns listings regardless of business types",
                  "if (businessTypes.length == 0) businessTypes = Object.keys(BUSINESS_TYPE_ENUM_MAP);",
                  "",
                  "const expectedBusinessTypes = businessTypes.map(el => BUSINESS_TYPE_ENUM_MAP[el]);",
                  "",
                  "pm.test(`Returned businesses in [${expectedBusinessTypes}]`, () => {",
                  "    jsonData.results.forEach(listing => {",
                  "        if (!expectedBusinessTypes.includes(listing.inventoryItem.business.businessType)) {",
                  "            pm.expect.fail(`Bad business type returned: got ${listing.inventoryItem.business.businessType}`);",
                  "        }",
                  "    });",
                  "});",
                  "",
                  "",
                  "let minPrice = parseInt(queryParams.minPrice, 10);",
                  "if (isNaN(minPrice)) minPrice = 0;",
                  "",
                  "let maxPrice = parseInt(queryParams.maxPrice, 10);",
                  "if (isNaN(maxPrice)) maxPrice = Number.POSITIVE_INFINITY;",
                  "pm.test(`Within price range of ${minPrice} to ${maxPrice}`, () => {",
                  "    jsonData.results.forEach(listing => {",
                  "        if (minPrice > listing.price || maxPrice < listing.price) {",
                  "            pm.expect.fail(`Not in expected price range of: got ${listing.price}`);",
                  "        }",
                  "    });",
                  "});",
                  "",
                  "",
                  "",
                  "let filterDates = (Array.isArray(queryParams.filterDates)?",
                  "        queryParams.filterDates:",
                  "        [queryParams.filterDates]",
                  "    ).filter(el => typeof el == \"string\" && el.length)",
                  "    .map(decodeURIComponent);",
                  "",
                  "if (filterDates.length == 1) {",
                  "    filterDates = [\"1950-05-05\", filterDates[0]];",
                  "}",
                  "",
                  "filterDates = filterDates.map(el => new Date(el));",
                  "if (filterDates.length) {",
                  "    pm.test(`Within date range of ${filterDates[0]} to ${filterDates[1]}`, () => {",
                  "        jsonData.results.forEach(listing => {",
                  "            const start = filterDates[0].getTime();",
                  "            const end = filterDates[1].getTime();",
                  "            const given = new Date(listing.closes).getTime();",
                  "            if (start > given || end < given) {",
                  "                pm.expect.fail(`Not in expected date range: got ${listing.closes}`);",
                  "            }",
                  "        });",
                  "    });",
                  "}",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/listings/search",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "listings",
                "search"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Search Listings",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "utils.autoLogin(pm);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "_ = require('lodash');\r",
                  "const store = pm.environment;\r",
                  "\r",
                  "const jsonData = pm.response.json();\r",
                  "\r",
                  "const queryParams = {};\r",
                  "pm.request.url.query.all().map(({key, value}) => {\r",
                  "    if (queryParams[key] != undefined) {\r",
                  "        if (!Array.isArray(queryParams[key])) queryParams[key] = [queryParams[key]];\r",
                  "        queryParams[key].push(value);\r",
                  "    } else {\r",
                  "        queryParams[key] = value;\r",
                  "    }\r",
                  "});\r",
                  "\r",
                  "// get query parameters from URL and put into object\r",
                  "\r",
                  "// Test status code\r",
                  "pm.test(`Status code is 200, (unrelated, num results: ${jsonData? jsonData.results.length: \"?\"})`, function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "// Test that totalCount is a Number and is between 0 & the amount of data returned\r",
                  "pm.test(\"'totalCount' returns a valid number\", function () {\r",
                  "    pm.expect(jsonData.totalCount).to.satisfy((count) => !isNaN(count));\r",
                  "    pm.expect(jsonData.totalCount).to.above(jsonData.results.length - 1);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "// Test the size of results match pagination indexes\r",
                  "pm.test(\"Pagination indicies returns valid number\", function () {\r",
                  "    let pagStartIndex = parseInt(queryParams.pagStartIndex, 10);\r",
                  "    // If start index is null then simplify it to zero\r",
                  "    if (isNaN(pagStartIndex)) pagStartIndex = 0;\r",
                  "    let pagEndIndex = parseInt(queryParams.pagEndIndex, 10);\r",
                  "    if (isNaN(pagEndIndex)) pagEndIndex = null;\r",
                  "    \r",
                  "    const resLength = jsonData.results.length;\r",
                  "    const totalCount = Number(jsonData.totalCount);\r",
                  "\r",
                  "    if (pagEndIndex == null) {\r",
                  "        pm.expect(totalCount).to.equal(Math.max(0, resLength - pagStartIndex));\r",
                  "        // if pagStartIndex > totalCount, 0 results returned\r",
                  "    } else {\r",
                  "        if (pagEndIndex >= totalCount) {\r",
                  "            pm.expect(resLength).lessThan(Math.max(pagEndIndex - pagStartIndex + 1, 0))\r",
                  "        } else {\r",
                  "            pm.expect(resLength).to.equal(Math.max(pagEndIndex - pagStartIndex + 1, 0));\r",
                  "        }\r",
                  "    }\r",
                  "});\r",
                  "\r",
                  "\r",
                  "// Test the response schema is correct\r",
                  "// Made using https://app.quicktype.io/#l=schema\r",
                  "// Validate with https://www.jsonschemavalidator.net/\r",
                  "const schema = {$ref:\"#/definitions/Root\",definitions:{Root:{type:\"object\",additionalProperties:!1,properties:{results:{type:\"array\",items:{$ref:\"#/definitions/Listing\"}},totalCount:{type:\"integer\",minimum:0}},required:[\"results\",\"totalCount\"],title:\"Root\"},Listing:{type:\"object\",additionalProperties:!1,properties:{id:{type:\"integer\",minimum:0},inventoryItem:{$ref:\"#/definitions/InventoryItem\"},quantity:{type:\"integer\",minimum:0},price:{type:\"number\",minimum:0},moreInfo:{anyOf:[{type:\"null\"},{type:\"string\"}]},created:{type:\"string\",format:\"date-time\"},closes:{type:\"string\",format:\"date-time\"}},required:[\"closes\",\"created\",\"id\",\"inventoryItem\",\"moreInfo\",\"price\",\"quantity\"],title:\"Listing\"},InventoryItem:{type:\"object\",additionalProperties:!1,properties:{id:{type:\"integer\",minimum:0},product:{$ref:\"#/definitions/Product\"},quantity:{type:\"integer\",minimum:0},pricePerItem:{type:\"number\",minimum:0},totalPrice:{type:\"number\",minimum:0},expires:{type:\"string\",format:\"date\"},manufactured:{type:\"string\",format:\"date\"},sellBy:{type:\"string\",format:\"date\"},bestBefore:{type:\"string\",format:\"date\"},business:{$ref:\"#/definitions/Business\"}},required:[\"bestBefore\",\"business\",\"expires\",\"id\",\"manufactured\",\"pricePerItem\",\"product\",\"quantity\",\"sellBy\",\"totalPrice\"],title:\"InventoryItem\"},Product:{type:\"object\",additionalProperties:!1,properties:{id:{type:\"integer\",minimum:0},name:{type:\"string\"},description:{type:\"string\"},manufacturer:{type:\"string\"},recommendedRetailPrice:{type:\"number\",minimum:0},created:{type:\"string\",format:\"date-time\"},images:{type:\"array\",items:{$ref:\"#/definitions/ProductImage\"}}},required:[\"created\",\"description\",\"id\",\"images\",\"name\",\"recommendedRetailPrice\"],title:\"Product\"},ProductImage:{type:\"object\",additionalProperties:!1,properties:{id:{type:\"integer\",minimum:0},filename:{type:\"string\"},thumbnailFilename:{type:\"string\"}},required:[\"id\",\"filename\",\"thumbnailFilename\"],title:\"ProductImage\"},Business:{type:\"object\",additionalProperties:!1,properties:{id:{type:\"integer\",minimum:0},primaryAdministratorId:{type:\"integer\",minimum:0},name:{type:\"string\"},description:{type:\"string\"},address:{$ref:\"#/definitions/Address\"},businessType:{type:\"string\"},created:{type:\"string\",format:\"date-time\"}},required:[\"address\",\"businessType\",\"created\",\"description\",\"id\",\"name\",\"primaryAdministratorId\"],title:\"Business\"},Address:{type:\"object\",additionalProperties:!1,properties:{streetNumber:{type:[\"string\",\"null\"]},streetName:{type:[\"string\",\"null\"]},suburb:{type:[\"string\",\"null\"]},postcode:{type:[\"string\",\"null\"]},city:{type:[\"string\",\"null\"]},region:{type:[\"string\",\"null\"]},country:{type:[\"string\",\"null\"]}},required:[\"country\"],title:\"Address\"}}};\r",
                  "\r",
                  "pm.test('Response body is in expected schema', function () {\r",
                  "    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
                  "});\r",
                  "\r",
                  "\r",
                  "const sortBy = queryParams.sortBy !== undefined? queryParams.sortBy: \"created\";\r",
                  "\r",
                  "if (utils.LISTINGS_SEARCH_SORT_KEY_PATHS[sortBy] == undefined) {\r",
                  "    pm.fail(`Sort by key ${sortBy} not found in LISTINGS_SEARCH_SORT_KEY_PATHS (defined in collection pre-request script)`)\r",
                  "}\r",
                  "\r",
                  "// Match the lodash format (asc/desc). Default to ascending\r",
                  "const isAscending = queryParams.isAscending == \"false\"? \"desc\" : \"asc\";\r",
                  "\r",
                  "pm.test(`Listing sorted by ${sortBy} in ${isAscending}ending order`, () => {\r",
                  "   // Using the orderBy function from lodash \r",
                  "   // Read docs: https://lodash.com/docs/4.17.10#orderBy    \r",
                  "\r",
                  "    const keyPath = utils.LISTINGS_SEARCH_SORT_KEY_PATHS[sortBy];\r",
                  "   // I use `({ sortBy }) => sortBy || ''` so that nulls are ordered last in Ascending order to match the API\r",
                  "    const expectedSortedOrder = _.orderBy(jsonData.results, [el => keyPath(el) || \"\"], [isAscending]);\r",
                  "    \r",
                  "    pm.expect(jsonData.results).to.eql(expectedSortedOrder, \"Got given order: \" +\r",
                  "        jsonData.results.map(el => `\"${keyPath(el)}\"`).join(\", \")\r",
                  "    );\r",
                  "});\r",
                  "\r",
                  "\r",
                  "const BUSINESS_TYPE_ENUM_MAP = {\r",
                  "  ACCOMMODATION_AND_FOOD: \"Accommodation and Food Services\",\r",
                  "  RETAIL: \"Retail Trade\",\r",
                  "  CHARITY: \"Charitable organisation\",\r",
                  "  NON_PROFIT: \"Non-profit organisation\"\r",
                  "}\r",
                  "\r",
                  "let businessTypes = (Array.isArray(queryParams.businessTypes)?\r",
                  "        queryParams.businessTypes:\r",
                  "        [queryParams.businessTypes]\r",
                  "    ).filter(el => typeof el == \"string\" && el.length);\r",
                  "// If none sent, returns listings regardless of business types\r",
                  "if (businessTypes.length == 0) businessTypes = Object.keys(BUSINESS_TYPE_ENUM_MAP);\r",
                  "\r",
                  "const expectedBusinessTypes = businessTypes.map(el => BUSINESS_TYPE_ENUM_MAP[el]);\r",
                  "\r",
                  "pm.test(`Returned businesses in [${expectedBusinessTypes}]`, () => {\r",
                  "    jsonData.results.forEach(listing => {\r",
                  "        if (!expectedBusinessTypes.includes(listing.inventoryItem.business.businessType)) {\r",
                  "            pm.expect.fail(`Bad business type returned: got ${listing.inventoryItem.business.businessType}`);\r",
                  "        }\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "\r",
                  "let minPrice = parseInt(queryParams.minPrice, 10);\r",
                  "if (isNaN(minPrice)) minPrice = 0;\r",
                  "\r",
                  "let maxPrice = parseInt(queryParams.maxPrice, 10);\r",
                  "if (isNaN(maxPrice)) maxPrice = Number.POSITIVE_INFINITY;\r",
                  "pm.test(`Within price range of ${minPrice} to ${maxPrice}`, () => {\r",
                  "    jsonData.results.forEach(listing => {\r",
                  "        if (minPrice > listing.price || maxPrice < listing.price) {\r",
                  "            pm.expect.fail(`Not in expected price range of: got ${listing.price}`);\r",
                  "        }\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "\r",
                  "\r",
                  "let filterDates = (Array.isArray(queryParams.filterDates)?\r",
                  "        queryParams.filterDates:\r",
                  "        [queryParams.filterDates]\r",
                  "    ).filter(el => typeof el == \"string\" && el.length)\r",
                  "    .map(decodeURIComponent);\r",
                  "\r",
                  "if (filterDates.length == 1) {\r",
                  "    filterDates = [\"1950-05-05\", filterDates[0]];\r",
                  "}\r",
                  "\r",
                  "filterDates = filterDates.map(el => new Date(el));\r",
                  "if (filterDates.length) {\r",
                  "    pm.test(`Within date range of ${filterDates[0]} to ${filterDates[1]}`, () => {\r",
                  "        jsonData.results.forEach(listing => {\r",
                  "            const start = filterDates[0].getTime();\r",
                  "            const end = filterDates[1].getTime();\r",
                  "            const given = new Date(listing.closes).getTime();\r",
                  "            if (start > given || end < given) {\r",
                  "                pm.expect.fail(`Not in expected date range: got ${listing.closes}`);\r",
                  "            }\r",
                  "        });\r",
                  "    });\r",
                  "}\r",
                  "\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/listings/search?searchKeys=PRODUCT_NAME&sortBy=quantity&pagStartIndex=0&pagEndIndex=100&minPrice=9",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "listings",
                "search"
              ],
              "query": [
                {
                  "key": "searchKeys",
                  "value": "BUSINESS_NAME",
                  "disabled": true
                },
                {
                  "key": "searchKeys",
                  "value": "PRODUCT_NAME"
                },
                {
                  "key": "searchKeys",
                  "value": "ADDRESS",
                  "disabled": true
                },
                {
                  "key": "searchParam",
                  "value": "palace AND macs",
                  "disabled": true
                },
                {
                  "key": "sortBy",
                  "value": "quantity"
                },
                {
                  "key": "isAscending",
                  "value": "1",
                  "disabled": true
                },
                {
                  "key": "pagStartIndex",
                  "value": "0"
                },
                {
                  "key": "pagEndIndex",
                  "value": "100"
                },
                {
                  "key": "minPrice",
                  "value": "9"
                },
                {
                  "key": "maxPrice",
                  "value": "9.001",
                  "disabled": true
                },
                {
                  "key": "filterDates",
                  "value": "2021-05-14T10:00:00.000Z",
                  "disabled": true
                },
                {
                  "key": "filterDates",
                  "value": "2021-05-18T10:00:00.000Z",
                  "disabled": true
                }
              ]
            }
          },
          "response": []
        }
      ]
    }
  ],
  "auth": {
    "type": "apikey",
    "apikey": [
      {
        "key": "value",
        "value": "{{JSESSIONID}",
        "type": "string"
      },
      {
        "key": "key",
        "value": "JSESSIONID",
        "type": "string"
      },
      {
        "key": "in",
        "value": "header",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "const TEST_INDEX = \"testIndex\";",
          "",
          "const getTestIndex = (store) => {",
          "    const val = Number(store.get(TEST_INDEX));",
          "    if (isNaN(val)) {",
          "        store.set(TEST_INDEX, 50);",
          "        return 0;",
          "    }",
          "",
          "    return val;",
          "}",
          "",
          "const incrementTestIndex = (store, i = 1) => {",
          "    store.set(TEST_INDEX, getTestIndex(store) + i);",
          "}",
          "",
          "const autoLogin = (pm) => {",
          "    // pm needs to be sent for some reason",
          "    pm.sendRequest({",
          "        url: `${pm.collectionVariables.get(\"baseUrl\")}/login`,",
          "        method: \"POST\",",
          "        header: {",
          "            \"Content-Type\": \"application/json\"",
          "        },",
          "        body: {",
          "            mode: \"raw\",",
          "            raw: JSON.stringify({ ",
          "                \"email\": \"dnb36@uclive.ac.nz\",",
          "                \"password\": \"fun123\"",
          "            })",
          "        }",
          "    }, (...response) => {",
          "        if (response.length < 2 || response[1].code != 200) {",
          "            throw new Error(`Could not log in: got ${JSON.stringify(response, null, 2)}`)",
          "        }",
          "",
          "        const sessionCookie = response[2].cookies.find(el => el.name == \"JSESSIONID\");",
          "        pm.variables.set(\"SESSION_COOKIE\", sessionCookie);",
          "        pm.request.addHeader(pm.variables.get(\"SESSION_COOKIE\"));",
          "    });",
          "}",
          "",
          "utils = {",
          "    getTestIndex,",
          "    incrementTestIndex,",
          "    autoLogin,",
          "",
          "    LISTINGS_SEARCH_SORT_KEY_PATHS: {",
          "        \"quantity\": obj => obj.quantity,",
          "        \"price\": obj => obj.price,",
          "        \"created\": obj => obj.created,",
          "        \"closes\": obj => obj.closes,",
          "        \"city\": obj => obj.inventoryItem.business.address.city,",
          "        \"name\": obj => obj.inventoryItem.product.name,",
          "    },",
          "}",
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "localhost:9499"
    },
    {
      "key": "testIndex",
      "value": ""
    }
  ]
}
